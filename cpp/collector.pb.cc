// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collector.proto

#include "collector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace collector {
PROTOBUF_CONSTEXPR Aws::Aws(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cloudprovider_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cloudplatform_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cloudaccountid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cloudregion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cloudavailabilityzone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostimageid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hosttype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AwsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AwsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AwsDefaultTypeInternal() {}
  union {
    Aws _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AwsDefaultTypeInternal _Aws_default_instance_;
PROTOBUF_CONSTEXPR Azure::Azure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cloudprovider_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cloudplatform_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cloudregion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cloudaccountid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.azurevmname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.azurevmsize_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.azurevmscalesetname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.azureresourcegroupname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AzureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AzureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AzureDefaultTypeInternal() {}
  union {
    Azure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AzureDefaultTypeInternal _Azure_default_instance_;
PROTOBUF_CONSTEXPR K8s::K8s(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.namespace__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.podname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.poduid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct K8sDefaultTypeInternal {
  PROTOBUF_CONSTEXPR K8sDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~K8sDefaultTypeInternal() {}
  union {
    K8s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 K8sDefaultTypeInternal _K8s_default_instance_;
PROTOBUF_CONSTEXPR HostID::HostID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_addresses_)*/{}
  , /*decltype(_impl_.macaddresses_)*/{}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ec2instanceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ec2availabilityzone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dockercontainerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.herokudynoid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.azappserviceinstanceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uamsclientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.awsmetadata_)*/nullptr
  , /*decltype(_impl_.azuremetadata_)*/nullptr
  , /*decltype(_impl_.k8smetadata_)*/nullptr
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.hosttype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HostIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostIDDefaultTypeInternal() {}
  union {
    HostID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostIDDefaultTypeInternal _HostID_default_instance_;
PROTOBUF_CONSTEXPR OboeSetting_ArgumentsEntry_DoNotUse::OboeSetting_ArgumentsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct OboeSetting_ArgumentsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OboeSetting_ArgumentsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OboeSetting_ArgumentsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OboeSetting_ArgumentsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OboeSetting_ArgumentsEntry_DoNotUseDefaultTypeInternal _OboeSetting_ArgumentsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR OboeSetting::OboeSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arguments_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.flags_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_.ttl_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OboeSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OboeSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OboeSettingDefaultTypeInternal() {}
  union {
    OboeSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OboeSettingDefaultTypeInternal _OboeSetting_default_instance_;
PROTOBUF_CONSTEXPR MessageRequest::MessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.api_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/nullptr
  , /*decltype(_impl_.encoding_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageRequestDefaultTypeInternal() {}
  union {
    MessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageRequestDefaultTypeInternal _MessageRequest_default_instance_;
PROTOBUF_CONSTEXPR MessageResult::MessageResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.warning_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageResultDefaultTypeInternal() {}
  union {
    MessageResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageResultDefaultTypeInternal _MessageResult_default_instance_;
PROTOBUF_CONSTEXPR SettingsRequest::SettingsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.api_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SettingsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingsRequestDefaultTypeInternal() {}
  union {
    SettingsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingsRequestDefaultTypeInternal _SettingsRequest_default_instance_;
PROTOBUF_CONSTEXPR SettingsResult::SettingsResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.settings_)*/{}
  , /*decltype(_impl_.arg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.warning_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SettingsResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingsResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingsResultDefaultTypeInternal() {}
  union {
    SettingsResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingsResultDefaultTypeInternal _SettingsResult_default_instance_;
PROTOBUF_CONSTEXPR PingRequest::PingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.api_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingRequestDefaultTypeInternal() {}
  union {
    PingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingRequestDefaultTypeInternal _PingRequest_default_instance_;
}  // namespace collector
static ::_pb::Metadata file_level_metadata_collector_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_collector_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_collector_2eproto = nullptr;

const uint32_t TableStruct_collector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::collector::Aws, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::collector::Aws, _impl_.cloudprovider_),
  PROTOBUF_FIELD_OFFSET(::collector::Aws, _impl_.cloudplatform_),
  PROTOBUF_FIELD_OFFSET(::collector::Aws, _impl_.cloudaccountid_),
  PROTOBUF_FIELD_OFFSET(::collector::Aws, _impl_.cloudregion_),
  PROTOBUF_FIELD_OFFSET(::collector::Aws, _impl_.cloudavailabilityzone_),
  PROTOBUF_FIELD_OFFSET(::collector::Aws, _impl_.hostid_),
  PROTOBUF_FIELD_OFFSET(::collector::Aws, _impl_.hostimageid_),
  PROTOBUF_FIELD_OFFSET(::collector::Aws, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::collector::Aws, _impl_.hosttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::collector::Azure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::collector::Azure, _impl_.cloudprovider_),
  PROTOBUF_FIELD_OFFSET(::collector::Azure, _impl_.cloudplatform_),
  PROTOBUF_FIELD_OFFSET(::collector::Azure, _impl_.cloudregion_),
  PROTOBUF_FIELD_OFFSET(::collector::Azure, _impl_.cloudaccountid_),
  PROTOBUF_FIELD_OFFSET(::collector::Azure, _impl_.hostid_),
  PROTOBUF_FIELD_OFFSET(::collector::Azure, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::collector::Azure, _impl_.azurevmname_),
  PROTOBUF_FIELD_OFFSET(::collector::Azure, _impl_.azurevmsize_),
  PROTOBUF_FIELD_OFFSET(::collector::Azure, _impl_.azurevmscalesetname_),
  PROTOBUF_FIELD_OFFSET(::collector::Azure, _impl_.azureresourcegroupname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::collector::K8s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::collector::K8s, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::collector::K8s, _impl_.podname_),
  PROTOBUF_FIELD_OFFSET(::collector::K8s, _impl_.poduid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.ip_addresses_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.ec2instanceid_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.ec2availabilityzone_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.dockercontainerid_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.macaddresses_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.herokudynoid_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.azappserviceinstanceid_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.hosttype_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.uamsclientid_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.awsmetadata_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.azuremetadata_),
  PROTOBUF_FIELD_OFFSET(::collector::HostID, _impl_.k8smetadata_),
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting_ArgumentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting_ArgumentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting_ArgumentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting_ArgumentsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting, _impl_.layer_),
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::collector::OboeSetting, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::collector::MessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::collector::MessageRequest, _impl_.api_key_),
  PROTOBUF_FIELD_OFFSET(::collector::MessageRequest, _impl_.messages_),
  PROTOBUF_FIELD_OFFSET(::collector::MessageRequest, _impl_.encoding_),
  PROTOBUF_FIELD_OFFSET(::collector::MessageRequest, _impl_.identity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::collector::MessageResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::collector::MessageResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::collector::MessageResult, _impl_.arg_),
  PROTOBUF_FIELD_OFFSET(::collector::MessageResult, _impl_.warning_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::collector::SettingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::collector::SettingsRequest, _impl_.api_key_),
  PROTOBUF_FIELD_OFFSET(::collector::SettingsRequest, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::collector::SettingsRequest, _impl_.clientversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::collector::SettingsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::collector::SettingsResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::collector::SettingsResult, _impl_.arg_),
  PROTOBUF_FIELD_OFFSET(::collector::SettingsResult, _impl_.settings_),
  PROTOBUF_FIELD_OFFSET(::collector::SettingsResult, _impl_.warning_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::collector::PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::collector::PingRequest, _impl_.api_key_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::collector::Aws)},
  { 15, -1, -1, sizeof(::collector::Azure)},
  { 31, -1, -1, sizeof(::collector::K8s)},
  { 40, -1, -1, sizeof(::collector::HostID)},
  { 61, 69, -1, sizeof(::collector::OboeSetting_ArgumentsEntry_DoNotUse)},
  { 71, -1, -1, sizeof(::collector::OboeSetting)},
  { 84, -1, -1, sizeof(::collector::MessageRequest)},
  { 94, -1, -1, sizeof(::collector::MessageResult)},
  { 103, -1, -1, sizeof(::collector::SettingsRequest)},
  { 112, -1, -1, sizeof(::collector::SettingsResult)},
  { 122, -1, -1, sizeof(::collector::PingRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::collector::_Aws_default_instance_._instance,
  &::collector::_Azure_default_instance_._instance,
  &::collector::_K8s_default_instance_._instance,
  &::collector::_HostID_default_instance_._instance,
  &::collector::_OboeSetting_ArgumentsEntry_DoNotUse_default_instance_._instance,
  &::collector::_OboeSetting_default_instance_._instance,
  &::collector::_MessageRequest_default_instance_._instance,
  &::collector::_MessageResult_default_instance_._instance,
  &::collector::_SettingsRequest_default_instance_._instance,
  &::collector::_SettingsResult_default_instance_._instance,
  &::collector::_PingRequest_default_instance_._instance,
};

const char descriptor_table_protodef_collector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017collector.proto\022\tcollector\"\310\001\n\003Aws\022\025\n\r"
  "cloudProvider\030\001 \001(\t\022\025\n\rcloudPlatform\030\002 \001"
  "(\t\022\026\n\016cloudAccountId\030\003 \001(\t\022\023\n\013cloudRegio"
  "n\030\004 \001(\t\022\035\n\025cloudAvailabilityZone\030\005 \001(\t\022\016"
  "\n\006hostId\030\006 \001(\t\022\023\n\013hostImageId\030\007 \001(\t\022\020\n\010h"
  "ostName\030\010 \001(\t\022\020\n\010hostType\030\t \001(\t\"\353\001\n\005Azur"
  "e\022\025\n\rcloudProvider\030\001 \001(\t\022\025\n\rcloudPlatfor"
  "m\030\002 \001(\t\022\023\n\013cloudRegion\030\003 \001(\t\022\026\n\016cloudAcc"
  "ountId\030\004 \001(\t\022\016\n\006hostId\030\005 \001(\t\022\020\n\010hostName"
  "\030\006 \001(\t\022\023\n\013azureVmName\030\007 \001(\t\022\023\n\013azureVmSi"
  "ze\030\010 \001(\t\022\033\n\023azureVmScaleSetName\030\t \001(\t\022\036\n"
  "\026azureResourceGroupName\030\n \001(\t\"9\n\003K8s\022\021\n\t"
  "namespace\030\001 \001(\t\022\017\n\007podName\030\002 \001(\t\022\016\n\006podU"
  "id\030\003 \001(\t\"\226\003\n\006HostID\022\020\n\010hostname\030\001 \001(\t\022\024\n"
  "\014ip_addresses\030\002 \003(\t\022\014\n\004uuid\030\003 \001(\t\022\013\n\003pid"
  "\030\004 \001(\005\022\025\n\rec2InstanceID\030\005 \001(\t\022\033\n\023ec2Avai"
  "labilityZone\030\006 \001(\t\022\031\n\021dockerContainerID\030"
  "\007 \001(\t\022\024\n\014macAddresses\030\010 \003(\t\022\024\n\014herokuDyn"
  "oID\030\t \001(\t\022\036\n\026azAppServiceInstanceID\030\n \001("
  "\t\022%\n\010hostType\030\013 \001(\0162\023.collector.HostType"
  "\022\024\n\014uamsClientID\030\014 \001(\t\022#\n\013awsMetadata\030\r "
  "\001(\0132\016.collector.Aws\022\'\n\razureMetadata\030\016 \001"
  "(\0132\020.collector.Azure\022#\n\013k8sMetadata\030\017 \001("
  "\0132\016.collector.K8s\"\360\001\n\013OboeSetting\022(\n\004typ"
  "e\030\001 \001(\0162\032.collector.OboeSettingType\022\r\n\005f"
  "lags\030\002 \001(\014\022\021\n\ttimestamp\030\003 \001(\003\022\r\n\005value\030\004"
  " \001(\003\022\r\n\005layer\030\005 \001(\014\0228\n\targuments\030\007 \003(\0132%"
  ".collector.OboeSetting.ArgumentsEntry\022\013\n"
  "\003ttl\030\010 \001(\003\0320\n\016ArgumentsEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\203\001\n\016MessageRequest\022"
  "\017\n\007api_key\030\001 \001(\t\022\020\n\010messages\030\002 \003(\014\022)\n\010en"
  "coding\030\003 \001(\0162\027.collector.EncodingType\022#\n"
  "\010identity\030\004 \001(\0132\021.collector.HostID\"T\n\rMe"
  "ssageResult\022%\n\006result\030\001 \001(\0162\025.collector."
  "ResultCode\022\013\n\003arg\030\002 \001(\t\022\017\n\007warning\030\004 \001(\t"
  "\"^\n\017SettingsRequest\022\017\n\007api_key\030\001 \001(\t\022#\n\010"
  "identity\030\002 \001(\0132\021.collector.HostID\022\025\n\rcli"
  "entVersion\030\003 \001(\t\"\177\n\016SettingsResult\022%\n\006re"
  "sult\030\001 \001(\0162\025.collector.ResultCode\022\013\n\003arg"
  "\030\002 \001(\t\022(\n\010settings\030\003 \003(\0132\026.collector.Obo"
  "eSetting\022\017\n\007warning\030\004 \001(\t\"\036\n\013PingRequest"
  "\022\017\n\007api_key\030\001 \001(\t*Z\n\nResultCode\022\006\n\002OK\020\000\022"
  "\r\n\tTRY_LATER\020\001\022\023\n\017INVALID_API_KEY\020\002\022\022\n\016L"
  "IMIT_EXCEEDED\020\003\022\014\n\010REDIRECT\020\004*&\n\014Encodin"
  "gType\022\010\n\004BSON\020\000\022\014\n\010PROTOBUF\020\001**\n\010HostTyp"
  "e\022\016\n\nPERSISTENT\020\000\022\016\n\nAWS_LAMBDA\020\001*\237\001\n\017Ob"
  "oeSettingType\022\027\n\023DEFAULT_SAMPLE_RATE\020\000\022\025"
  "\n\021LAYER_SAMPLE_RATE\020\001\022\031\n\025LAYER_APP_SAMPL"
  "E_RATE\020\002\022\036\n\032LAYER_HTTPHOST_SAMPLE_RATE\020\003"
  "\022\021\n\rCONFIG_STRING\020\004\022\016\n\nCONFIG_INT\020\0052\344\002\n\016"
  "TraceCollector\022C\n\npostEvents\022\031.collector"
  ".MessageRequest\032\030.collector.MessageResul"
  "t\"\000\022D\n\013postMetrics\022\031.collector.MessageRe"
  "quest\032\030.collector.MessageResult\"\000\022C\n\npos"
  "tStatus\022\031.collector.MessageRequest\032\030.col"
  "lector.MessageResult\"\000\022F\n\013getSettings\022\032."
  "collector.SettingsRequest\032\031.collector.Se"
  "ttingsResult\"\000\022:\n\004ping\022\026.collector.PingR"
  "equest\032\030.collector.MessageResult\"\000B5\n$co"
  "m.solarwinds.trace.ingestion.protoZ\r./co"
  "llectorpbb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_collector_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_collector_2eproto = {
    false, false, 2417, descriptor_table_protodef_collector_2eproto,
    "collector.proto",
    &descriptor_table_collector_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_collector_2eproto::offsets,
    file_level_metadata_collector_2eproto, file_level_enum_descriptors_collector_2eproto,
    file_level_service_descriptors_collector_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_collector_2eproto_getter() {
  return &descriptor_table_collector_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_collector_2eproto(&descriptor_table_collector_2eproto);
namespace collector {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_collector_2eproto);
  return file_level_enum_descriptors_collector_2eproto[0];
}
bool ResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncodingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_collector_2eproto);
  return file_level_enum_descriptors_collector_2eproto[1];
}
bool EncodingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_collector_2eproto);
  return file_level_enum_descriptors_collector_2eproto[2];
}
bool HostType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OboeSettingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_collector_2eproto);
  return file_level_enum_descriptors_collector_2eproto[3];
}
bool OboeSettingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Aws::_Internal {
 public:
};

Aws::Aws(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:collector.Aws)
}
Aws::Aws(const Aws& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Aws* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cloudprovider_){}
    , decltype(_impl_.cloudplatform_){}
    , decltype(_impl_.cloudaccountid_){}
    , decltype(_impl_.cloudregion_){}
    , decltype(_impl_.cloudavailabilityzone_){}
    , decltype(_impl_.hostid_){}
    , decltype(_impl_.hostimageid_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.hosttype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cloudprovider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudprovider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cloudprovider().empty()) {
    _this->_impl_.cloudprovider_.Set(from._internal_cloudprovider(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cloudplatform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudplatform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cloudplatform().empty()) {
    _this->_impl_.cloudplatform_.Set(from._internal_cloudplatform(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cloudaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudaccountid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cloudaccountid().empty()) {
    _this->_impl_.cloudaccountid_.Set(from._internal_cloudaccountid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cloudregion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudregion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cloudregion().empty()) {
    _this->_impl_.cloudregion_.Set(from._internal_cloudregion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cloudavailabilityzone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudavailabilityzone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cloudavailabilityzone().empty()) {
    _this->_impl_.cloudavailabilityzone_.Set(from._internal_cloudavailabilityzone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostid().empty()) {
    _this->_impl_.hostid_.Set(from._internal_hostid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostimageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostimageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostimageid().empty()) {
    _this->_impl_.hostimageid_.Set(from._internal_hostimageid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hosttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hosttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hosttype().empty()) {
    _this->_impl_.hosttype_.Set(from._internal_hosttype(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:collector.Aws)
}

inline void Aws::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cloudprovider_){}
    , decltype(_impl_.cloudplatform_){}
    , decltype(_impl_.cloudaccountid_){}
    , decltype(_impl_.cloudregion_){}
    , decltype(_impl_.cloudavailabilityzone_){}
    , decltype(_impl_.hostid_){}
    , decltype(_impl_.hostimageid_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.hosttype_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cloudprovider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudprovider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cloudplatform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudplatform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cloudaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudaccountid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cloudregion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudregion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cloudavailabilityzone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudavailabilityzone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostimageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostimageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hosttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hosttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Aws::~Aws() {
  // @@protoc_insertion_point(destructor:collector.Aws)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Aws::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cloudprovider_.Destroy();
  _impl_.cloudplatform_.Destroy();
  _impl_.cloudaccountid_.Destroy();
  _impl_.cloudregion_.Destroy();
  _impl_.cloudavailabilityzone_.Destroy();
  _impl_.hostid_.Destroy();
  _impl_.hostimageid_.Destroy();
  _impl_.hostname_.Destroy();
  _impl_.hosttype_.Destroy();
}

void Aws::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Aws::Clear() {
// @@protoc_insertion_point(message_clear_start:collector.Aws)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cloudprovider_.ClearToEmpty();
  _impl_.cloudplatform_.ClearToEmpty();
  _impl_.cloudaccountid_.ClearToEmpty();
  _impl_.cloudregion_.ClearToEmpty();
  _impl_.cloudavailabilityzone_.ClearToEmpty();
  _impl_.hostid_.ClearToEmpty();
  _impl_.hostimageid_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  _impl_.hosttype_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aws::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cloudProvider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cloudprovider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Aws.cloudProvider"));
        } else
          goto handle_unusual;
        continue;
      // string cloudPlatform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cloudplatform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Aws.cloudPlatform"));
        } else
          goto handle_unusual;
        continue;
      // string cloudAccountId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cloudaccountid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Aws.cloudAccountId"));
        } else
          goto handle_unusual;
        continue;
      // string cloudRegion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cloudregion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Aws.cloudRegion"));
        } else
          goto handle_unusual;
        continue;
      // string cloudAvailabilityZone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cloudavailabilityzone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Aws.cloudAvailabilityZone"));
        } else
          goto handle_unusual;
        continue;
      // string hostId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hostid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Aws.hostId"));
        } else
          goto handle_unusual;
        continue;
      // string hostImageId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_hostimageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Aws.hostImageId"));
        } else
          goto handle_unusual;
        continue;
      // string hostName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Aws.hostName"));
        } else
          goto handle_unusual;
        continue;
      // string hostType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_hosttype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Aws.hostType"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Aws::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:collector.Aws)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cloudProvider = 1;
  if (!this->_internal_cloudprovider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudprovider().data(), static_cast<int>(this->_internal_cloudprovider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Aws.cloudProvider");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cloudprovider(), target);
  }

  // string cloudPlatform = 2;
  if (!this->_internal_cloudplatform().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudplatform().data(), static_cast<int>(this->_internal_cloudplatform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Aws.cloudPlatform");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cloudplatform(), target);
  }

  // string cloudAccountId = 3;
  if (!this->_internal_cloudaccountid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudaccountid().data(), static_cast<int>(this->_internal_cloudaccountid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Aws.cloudAccountId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cloudaccountid(), target);
  }

  // string cloudRegion = 4;
  if (!this->_internal_cloudregion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudregion().data(), static_cast<int>(this->_internal_cloudregion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Aws.cloudRegion");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cloudregion(), target);
  }

  // string cloudAvailabilityZone = 5;
  if (!this->_internal_cloudavailabilityzone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudavailabilityzone().data(), static_cast<int>(this->_internal_cloudavailabilityzone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Aws.cloudAvailabilityZone");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cloudavailabilityzone(), target);
  }

  // string hostId = 6;
  if (!this->_internal_hostid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostid().data(), static_cast<int>(this->_internal_hostid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Aws.hostId");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hostid(), target);
  }

  // string hostImageId = 7;
  if (!this->_internal_hostimageid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostimageid().data(), static_cast<int>(this->_internal_hostimageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Aws.hostImageId");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hostimageid(), target);
  }

  // string hostName = 8;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Aws.hostName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_hostname(), target);
  }

  // string hostType = 9;
  if (!this->_internal_hosttype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hosttype().data(), static_cast<int>(this->_internal_hosttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Aws.hostType");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_hosttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collector.Aws)
  return target;
}

size_t Aws::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:collector.Aws)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cloudProvider = 1;
  if (!this->_internal_cloudprovider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudprovider());
  }

  // string cloudPlatform = 2;
  if (!this->_internal_cloudplatform().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudplatform());
  }

  // string cloudAccountId = 3;
  if (!this->_internal_cloudaccountid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudaccountid());
  }

  // string cloudRegion = 4;
  if (!this->_internal_cloudregion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudregion());
  }

  // string cloudAvailabilityZone = 5;
  if (!this->_internal_cloudavailabilityzone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudavailabilityzone());
  }

  // string hostId = 6;
  if (!this->_internal_hostid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostid());
  }

  // string hostImageId = 7;
  if (!this->_internal_hostimageid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostimageid());
  }

  // string hostName = 8;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string hostType = 9;
  if (!this->_internal_hosttype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hosttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aws::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Aws::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aws::GetClassData() const { return &_class_data_; }


void Aws::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Aws*>(&to_msg);
  auto& from = static_cast<const Aws&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:collector.Aws)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cloudprovider().empty()) {
    _this->_internal_set_cloudprovider(from._internal_cloudprovider());
  }
  if (!from._internal_cloudplatform().empty()) {
    _this->_internal_set_cloudplatform(from._internal_cloudplatform());
  }
  if (!from._internal_cloudaccountid().empty()) {
    _this->_internal_set_cloudaccountid(from._internal_cloudaccountid());
  }
  if (!from._internal_cloudregion().empty()) {
    _this->_internal_set_cloudregion(from._internal_cloudregion());
  }
  if (!from._internal_cloudavailabilityzone().empty()) {
    _this->_internal_set_cloudavailabilityzone(from._internal_cloudavailabilityzone());
  }
  if (!from._internal_hostid().empty()) {
    _this->_internal_set_hostid(from._internal_hostid());
  }
  if (!from._internal_hostimageid().empty()) {
    _this->_internal_set_hostimageid(from._internal_hostimageid());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_hosttype().empty()) {
    _this->_internal_set_hosttype(from._internal_hosttype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aws::CopyFrom(const Aws& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collector.Aws)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aws::IsInitialized() const {
  return true;
}

void Aws::InternalSwap(Aws* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cloudprovider_, lhs_arena,
      &other->_impl_.cloudprovider_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cloudplatform_, lhs_arena,
      &other->_impl_.cloudplatform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cloudaccountid_, lhs_arena,
      &other->_impl_.cloudaccountid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cloudregion_, lhs_arena,
      &other->_impl_.cloudregion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cloudavailabilityzone_, lhs_arena,
      &other->_impl_.cloudavailabilityzone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostid_, lhs_arena,
      &other->_impl_.hostid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostimageid_, lhs_arena,
      &other->_impl_.hostimageid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hosttype_, lhs_arena,
      &other->_impl_.hosttype_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Aws::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collector_2eproto_getter, &descriptor_table_collector_2eproto_once,
      file_level_metadata_collector_2eproto[0]);
}

// ===================================================================

class Azure::_Internal {
 public:
};

Azure::Azure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:collector.Azure)
}
Azure::Azure(const Azure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Azure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cloudprovider_){}
    , decltype(_impl_.cloudplatform_){}
    , decltype(_impl_.cloudregion_){}
    , decltype(_impl_.cloudaccountid_){}
    , decltype(_impl_.hostid_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.azurevmname_){}
    , decltype(_impl_.azurevmsize_){}
    , decltype(_impl_.azurevmscalesetname_){}
    , decltype(_impl_.azureresourcegroupname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cloudprovider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudprovider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cloudprovider().empty()) {
    _this->_impl_.cloudprovider_.Set(from._internal_cloudprovider(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cloudplatform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudplatform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cloudplatform().empty()) {
    _this->_impl_.cloudplatform_.Set(from._internal_cloudplatform(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cloudregion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudregion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cloudregion().empty()) {
    _this->_impl_.cloudregion_.Set(from._internal_cloudregion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cloudaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudaccountid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cloudaccountid().empty()) {
    _this->_impl_.cloudaccountid_.Set(from._internal_cloudaccountid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostid().empty()) {
    _this->_impl_.hostid_.Set(from._internal_hostid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.azurevmname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.azurevmname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_azurevmname().empty()) {
    _this->_impl_.azurevmname_.Set(from._internal_azurevmname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.azurevmsize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.azurevmsize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_azurevmsize().empty()) {
    _this->_impl_.azurevmsize_.Set(from._internal_azurevmsize(), 
      _this->GetArenaForAllocation());
  }
  _impl_.azurevmscalesetname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.azurevmscalesetname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_azurevmscalesetname().empty()) {
    _this->_impl_.azurevmscalesetname_.Set(from._internal_azurevmscalesetname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.azureresourcegroupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.azureresourcegroupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_azureresourcegroupname().empty()) {
    _this->_impl_.azureresourcegroupname_.Set(from._internal_azureresourcegroupname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:collector.Azure)
}

inline void Azure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cloudprovider_){}
    , decltype(_impl_.cloudplatform_){}
    , decltype(_impl_.cloudregion_){}
    , decltype(_impl_.cloudaccountid_){}
    , decltype(_impl_.hostid_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.azurevmname_){}
    , decltype(_impl_.azurevmsize_){}
    , decltype(_impl_.azurevmscalesetname_){}
    , decltype(_impl_.azureresourcegroupname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cloudprovider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudprovider_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cloudplatform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudplatform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cloudregion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudregion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cloudaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cloudaccountid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.azurevmname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.azurevmname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.azurevmsize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.azurevmsize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.azurevmscalesetname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.azurevmscalesetname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.azureresourcegroupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.azureresourcegroupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Azure::~Azure() {
  // @@protoc_insertion_point(destructor:collector.Azure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Azure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cloudprovider_.Destroy();
  _impl_.cloudplatform_.Destroy();
  _impl_.cloudregion_.Destroy();
  _impl_.cloudaccountid_.Destroy();
  _impl_.hostid_.Destroy();
  _impl_.hostname_.Destroy();
  _impl_.azurevmname_.Destroy();
  _impl_.azurevmsize_.Destroy();
  _impl_.azurevmscalesetname_.Destroy();
  _impl_.azureresourcegroupname_.Destroy();
}

void Azure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Azure::Clear() {
// @@protoc_insertion_point(message_clear_start:collector.Azure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cloudprovider_.ClearToEmpty();
  _impl_.cloudplatform_.ClearToEmpty();
  _impl_.cloudregion_.ClearToEmpty();
  _impl_.cloudaccountid_.ClearToEmpty();
  _impl_.hostid_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  _impl_.azurevmname_.ClearToEmpty();
  _impl_.azurevmsize_.ClearToEmpty();
  _impl_.azurevmscalesetname_.ClearToEmpty();
  _impl_.azureresourcegroupname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Azure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cloudProvider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cloudprovider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Azure.cloudProvider"));
        } else
          goto handle_unusual;
        continue;
      // string cloudPlatform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cloudplatform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Azure.cloudPlatform"));
        } else
          goto handle_unusual;
        continue;
      // string cloudRegion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cloudregion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Azure.cloudRegion"));
        } else
          goto handle_unusual;
        continue;
      // string cloudAccountId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cloudaccountid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Azure.cloudAccountId"));
        } else
          goto handle_unusual;
        continue;
      // string hostId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hostid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Azure.hostId"));
        } else
          goto handle_unusual;
        continue;
      // string hostName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Azure.hostName"));
        } else
          goto handle_unusual;
        continue;
      // string azureVmName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_azurevmname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Azure.azureVmName"));
        } else
          goto handle_unusual;
        continue;
      // string azureVmSize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_azurevmsize();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Azure.azureVmSize"));
        } else
          goto handle_unusual;
        continue;
      // string azureVmScaleSetName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_azurevmscalesetname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Azure.azureVmScaleSetName"));
        } else
          goto handle_unusual;
        continue;
      // string azureResourceGroupName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_azureresourcegroupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.Azure.azureResourceGroupName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Azure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:collector.Azure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cloudProvider = 1;
  if (!this->_internal_cloudprovider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudprovider().data(), static_cast<int>(this->_internal_cloudprovider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Azure.cloudProvider");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cloudprovider(), target);
  }

  // string cloudPlatform = 2;
  if (!this->_internal_cloudplatform().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudplatform().data(), static_cast<int>(this->_internal_cloudplatform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Azure.cloudPlatform");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cloudplatform(), target);
  }

  // string cloudRegion = 3;
  if (!this->_internal_cloudregion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudregion().data(), static_cast<int>(this->_internal_cloudregion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Azure.cloudRegion");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cloudregion(), target);
  }

  // string cloudAccountId = 4;
  if (!this->_internal_cloudaccountid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudaccountid().data(), static_cast<int>(this->_internal_cloudaccountid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Azure.cloudAccountId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cloudaccountid(), target);
  }

  // string hostId = 5;
  if (!this->_internal_hostid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostid().data(), static_cast<int>(this->_internal_hostid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Azure.hostId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hostid(), target);
  }

  // string hostName = 6;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Azure.hostName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hostname(), target);
  }

  // string azureVmName = 7;
  if (!this->_internal_azurevmname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_azurevmname().data(), static_cast<int>(this->_internal_azurevmname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Azure.azureVmName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_azurevmname(), target);
  }

  // string azureVmSize = 8;
  if (!this->_internal_azurevmsize().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_azurevmsize().data(), static_cast<int>(this->_internal_azurevmsize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Azure.azureVmSize");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_azurevmsize(), target);
  }

  // string azureVmScaleSetName = 9;
  if (!this->_internal_azurevmscalesetname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_azurevmscalesetname().data(), static_cast<int>(this->_internal_azurevmscalesetname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Azure.azureVmScaleSetName");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_azurevmscalesetname(), target);
  }

  // string azureResourceGroupName = 10;
  if (!this->_internal_azureresourcegroupname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_azureresourcegroupname().data(), static_cast<int>(this->_internal_azureresourcegroupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.Azure.azureResourceGroupName");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_azureresourcegroupname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collector.Azure)
  return target;
}

size_t Azure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:collector.Azure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cloudProvider = 1;
  if (!this->_internal_cloudprovider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudprovider());
  }

  // string cloudPlatform = 2;
  if (!this->_internal_cloudplatform().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudplatform());
  }

  // string cloudRegion = 3;
  if (!this->_internal_cloudregion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudregion());
  }

  // string cloudAccountId = 4;
  if (!this->_internal_cloudaccountid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudaccountid());
  }

  // string hostId = 5;
  if (!this->_internal_hostid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostid());
  }

  // string hostName = 6;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string azureVmName = 7;
  if (!this->_internal_azurevmname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_azurevmname());
  }

  // string azureVmSize = 8;
  if (!this->_internal_azurevmsize().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_azurevmsize());
  }

  // string azureVmScaleSetName = 9;
  if (!this->_internal_azurevmscalesetname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_azurevmscalesetname());
  }

  // string azureResourceGroupName = 10;
  if (!this->_internal_azureresourcegroupname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_azureresourcegroupname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Azure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Azure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Azure::GetClassData() const { return &_class_data_; }


void Azure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Azure*>(&to_msg);
  auto& from = static_cast<const Azure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:collector.Azure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cloudprovider().empty()) {
    _this->_internal_set_cloudprovider(from._internal_cloudprovider());
  }
  if (!from._internal_cloudplatform().empty()) {
    _this->_internal_set_cloudplatform(from._internal_cloudplatform());
  }
  if (!from._internal_cloudregion().empty()) {
    _this->_internal_set_cloudregion(from._internal_cloudregion());
  }
  if (!from._internal_cloudaccountid().empty()) {
    _this->_internal_set_cloudaccountid(from._internal_cloudaccountid());
  }
  if (!from._internal_hostid().empty()) {
    _this->_internal_set_hostid(from._internal_hostid());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_azurevmname().empty()) {
    _this->_internal_set_azurevmname(from._internal_azurevmname());
  }
  if (!from._internal_azurevmsize().empty()) {
    _this->_internal_set_azurevmsize(from._internal_azurevmsize());
  }
  if (!from._internal_azurevmscalesetname().empty()) {
    _this->_internal_set_azurevmscalesetname(from._internal_azurevmscalesetname());
  }
  if (!from._internal_azureresourcegroupname().empty()) {
    _this->_internal_set_azureresourcegroupname(from._internal_azureresourcegroupname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Azure::CopyFrom(const Azure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collector.Azure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Azure::IsInitialized() const {
  return true;
}

void Azure::InternalSwap(Azure* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cloudprovider_, lhs_arena,
      &other->_impl_.cloudprovider_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cloudplatform_, lhs_arena,
      &other->_impl_.cloudplatform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cloudregion_, lhs_arena,
      &other->_impl_.cloudregion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cloudaccountid_, lhs_arena,
      &other->_impl_.cloudaccountid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostid_, lhs_arena,
      &other->_impl_.hostid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.azurevmname_, lhs_arena,
      &other->_impl_.azurevmname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.azurevmsize_, lhs_arena,
      &other->_impl_.azurevmsize_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.azurevmscalesetname_, lhs_arena,
      &other->_impl_.azurevmscalesetname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.azureresourcegroupname_, lhs_arena,
      &other->_impl_.azureresourcegroupname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Azure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collector_2eproto_getter, &descriptor_table_collector_2eproto_once,
      file_level_metadata_collector_2eproto[1]);
}

// ===================================================================

class K8s::_Internal {
 public:
};

K8s::K8s(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:collector.K8s)
}
K8s::K8s(const K8s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  K8s* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.namespace__){}
    , decltype(_impl_.podname_){}
    , decltype(_impl_.poduid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    _this->_impl_.namespace__.Set(from._internal_namespace_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.podname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.podname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_podname().empty()) {
    _this->_impl_.podname_.Set(from._internal_podname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.poduid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.poduid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_poduid().empty()) {
    _this->_impl_.poduid_.Set(from._internal_poduid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:collector.K8s)
}

inline void K8s::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.namespace__){}
    , decltype(_impl_.podname_){}
    , decltype(_impl_.poduid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.podname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.podname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.poduid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.poduid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

K8s::~K8s() {
  // @@protoc_insertion_point(destructor:collector.K8s)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void K8s::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.namespace__.Destroy();
  _impl_.podname_.Destroy();
  _impl_.poduid_.Destroy();
}

void K8s::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void K8s::Clear() {
// @@protoc_insertion_point(message_clear_start:collector.K8s)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.namespace__.ClearToEmpty();
  _impl_.podname_.ClearToEmpty();
  _impl_.poduid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* K8s::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.K8s.namespace"));
        } else
          goto handle_unusual;
        continue;
      // string podName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_podname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.K8s.podName"));
        } else
          goto handle_unusual;
        continue;
      // string podUid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_poduid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.K8s.podUid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* K8s::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:collector.K8s)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.K8s.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // string podName = 2;
  if (!this->_internal_podname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_podname().data(), static_cast<int>(this->_internal_podname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.K8s.podName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_podname(), target);
  }

  // string podUid = 3;
  if (!this->_internal_poduid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_poduid().data(), static_cast<int>(this->_internal_poduid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.K8s.podUid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_poduid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collector.K8s)
  return target;
}

size_t K8s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:collector.K8s)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 1;
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string podName = 2;
  if (!this->_internal_podname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_podname());
  }

  // string podUid = 3;
  if (!this->_internal_poduid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_poduid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData K8s::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    K8s::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*K8s::GetClassData() const { return &_class_data_; }


void K8s::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<K8s*>(&to_msg);
  auto& from = static_cast<const K8s&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:collector.K8s)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_namespace_().empty()) {
    _this->_internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_podname().empty()) {
    _this->_internal_set_podname(from._internal_podname());
  }
  if (!from._internal_poduid().empty()) {
    _this->_internal_set_poduid(from._internal_poduid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void K8s::CopyFrom(const K8s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collector.K8s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K8s::IsInitialized() const {
  return true;
}

void K8s::InternalSwap(K8s* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace__, lhs_arena,
      &other->_impl_.namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.podname_, lhs_arena,
      &other->_impl_.podname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.poduid_, lhs_arena,
      &other->_impl_.poduid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata K8s::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collector_2eproto_getter, &descriptor_table_collector_2eproto_once,
      file_level_metadata_collector_2eproto[2]);
}

// ===================================================================

class HostID::_Internal {
 public:
  static const ::collector::Aws& awsmetadata(const HostID* msg);
  static const ::collector::Azure& azuremetadata(const HostID* msg);
  static const ::collector::K8s& k8smetadata(const HostID* msg);
};

const ::collector::Aws&
HostID::_Internal::awsmetadata(const HostID* msg) {
  return *msg->_impl_.awsmetadata_;
}
const ::collector::Azure&
HostID::_Internal::azuremetadata(const HostID* msg) {
  return *msg->_impl_.azuremetadata_;
}
const ::collector::K8s&
HostID::_Internal::k8smetadata(const HostID* msg) {
  return *msg->_impl_.k8smetadata_;
}
HostID::HostID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:collector.HostID)
}
HostID::HostID(const HostID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_addresses_){from._impl_.ip_addresses_}
    , decltype(_impl_.macaddresses_){from._impl_.macaddresses_}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.ec2instanceid_){}
    , decltype(_impl_.ec2availabilityzone_){}
    , decltype(_impl_.dockercontainerid_){}
    , decltype(_impl_.herokudynoid_){}
    , decltype(_impl_.azappserviceinstanceid_){}
    , decltype(_impl_.uamsclientid_){}
    , decltype(_impl_.awsmetadata_){nullptr}
    , decltype(_impl_.azuremetadata_){nullptr}
    , decltype(_impl_.k8smetadata_){nullptr}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.hosttype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ec2instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ec2instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ec2instanceid().empty()) {
    _this->_impl_.ec2instanceid_.Set(from._internal_ec2instanceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ec2availabilityzone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ec2availabilityzone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ec2availabilityzone().empty()) {
    _this->_impl_.ec2availabilityzone_.Set(from._internal_ec2availabilityzone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dockercontainerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dockercontainerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dockercontainerid().empty()) {
    _this->_impl_.dockercontainerid_.Set(from._internal_dockercontainerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.herokudynoid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.herokudynoid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_herokudynoid().empty()) {
    _this->_impl_.herokudynoid_.Set(from._internal_herokudynoid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.azappserviceinstanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.azappserviceinstanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_azappserviceinstanceid().empty()) {
    _this->_impl_.azappserviceinstanceid_.Set(from._internal_azappserviceinstanceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uamsclientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uamsclientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uamsclientid().empty()) {
    _this->_impl_.uamsclientid_.Set(from._internal_uamsclientid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_awsmetadata()) {
    _this->_impl_.awsmetadata_ = new ::collector::Aws(*from._impl_.awsmetadata_);
  }
  if (from._internal_has_azuremetadata()) {
    _this->_impl_.azuremetadata_ = new ::collector::Azure(*from._impl_.azuremetadata_);
  }
  if (from._internal_has_k8smetadata()) {
    _this->_impl_.k8smetadata_ = new ::collector::K8s(*from._impl_.k8smetadata_);
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hosttype_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.hosttype_));
  // @@protoc_insertion_point(copy_constructor:collector.HostID)
}

inline void HostID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_addresses_){arena}
    , decltype(_impl_.macaddresses_){arena}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.ec2instanceid_){}
    , decltype(_impl_.ec2availabilityzone_){}
    , decltype(_impl_.dockercontainerid_){}
    , decltype(_impl_.herokudynoid_){}
    , decltype(_impl_.azappserviceinstanceid_){}
    , decltype(_impl_.uamsclientid_){}
    , decltype(_impl_.awsmetadata_){nullptr}
    , decltype(_impl_.azuremetadata_){nullptr}
    , decltype(_impl_.k8smetadata_){nullptr}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.hosttype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ec2instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ec2instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ec2availabilityzone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ec2availabilityzone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dockercontainerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dockercontainerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.herokudynoid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.herokudynoid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.azappserviceinstanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.azappserviceinstanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uamsclientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uamsclientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HostID::~HostID() {
  // @@protoc_insertion_point(destructor:collector.HostID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_addresses_.~RepeatedPtrField();
  _impl_.macaddresses_.~RepeatedPtrField();
  _impl_.hostname_.Destroy();
  _impl_.uuid_.Destroy();
  _impl_.ec2instanceid_.Destroy();
  _impl_.ec2availabilityzone_.Destroy();
  _impl_.dockercontainerid_.Destroy();
  _impl_.herokudynoid_.Destroy();
  _impl_.azappserviceinstanceid_.Destroy();
  _impl_.uamsclientid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.awsmetadata_;
  if (this != internal_default_instance()) delete _impl_.azuremetadata_;
  if (this != internal_default_instance()) delete _impl_.k8smetadata_;
}

void HostID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostID::Clear() {
// @@protoc_insertion_point(message_clear_start:collector.HostID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_addresses_.Clear();
  _impl_.macaddresses_.Clear();
  _impl_.hostname_.ClearToEmpty();
  _impl_.uuid_.ClearToEmpty();
  _impl_.ec2instanceid_.ClearToEmpty();
  _impl_.ec2availabilityzone_.ClearToEmpty();
  _impl_.dockercontainerid_.ClearToEmpty();
  _impl_.herokudynoid_.ClearToEmpty();
  _impl_.azappserviceinstanceid_.ClearToEmpty();
  _impl_.uamsclientid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.awsmetadata_ != nullptr) {
    delete _impl_.awsmetadata_;
  }
  _impl_.awsmetadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.azuremetadata_ != nullptr) {
    delete _impl_.azuremetadata_;
  }
  _impl_.azuremetadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.k8smetadata_ != nullptr) {
    delete _impl_.k8smetadata_;
  }
  _impl_.k8smetadata_ = nullptr;
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hosttype_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.hosttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.HostID.hostname"));
        } else
          goto handle_unusual;
        continue;
      // repeated string ip_addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ip_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "collector.HostID.ip_addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.HostID.uuid"));
        } else
          goto handle_unusual;
        continue;
      // int32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ec2InstanceID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ec2instanceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.HostID.ec2InstanceID"));
        } else
          goto handle_unusual;
        continue;
      // string ec2AvailabilityZone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ec2availabilityzone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.HostID.ec2AvailabilityZone"));
        } else
          goto handle_unusual;
        continue;
      // string dockerContainerID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_dockercontainerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.HostID.dockerContainerID"));
        } else
          goto handle_unusual;
        continue;
      // repeated string macAddresses = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_macaddresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "collector.HostID.macAddresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string herokuDynoID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_herokudynoid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.HostID.herokuDynoID"));
        } else
          goto handle_unusual;
        continue;
      // string azAppServiceInstanceID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_azappserviceinstanceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.HostID.azAppServiceInstanceID"));
        } else
          goto handle_unusual;
        continue;
      // .collector.HostType hostType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hosttype(static_cast<::collector::HostType>(val));
        } else
          goto handle_unusual;
        continue;
      // string uamsClientID = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_uamsclientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.HostID.uamsClientID"));
        } else
          goto handle_unusual;
        continue;
      // .collector.Aws awsMetadata = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_awsmetadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .collector.Azure azureMetadata = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_azuremetadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .collector.K8s k8sMetadata = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_k8smetadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:collector.HostID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.HostID.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // repeated string ip_addresses = 2;
  for (int i = 0, n = this->_internal_ip_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_ip_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.HostID.ip_addresses");
    target = stream->WriteString(2, s, target);
  }

  // string uuid = 3;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.HostID.uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uuid(), target);
  }

  // int32 pid = 4;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_pid(), target);
  }

  // string ec2InstanceID = 5;
  if (!this->_internal_ec2instanceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ec2instanceid().data(), static_cast<int>(this->_internal_ec2instanceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.HostID.ec2InstanceID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ec2instanceid(), target);
  }

  // string ec2AvailabilityZone = 6;
  if (!this->_internal_ec2availabilityzone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ec2availabilityzone().data(), static_cast<int>(this->_internal_ec2availabilityzone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.HostID.ec2AvailabilityZone");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ec2availabilityzone(), target);
  }

  // string dockerContainerID = 7;
  if (!this->_internal_dockercontainerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dockercontainerid().data(), static_cast<int>(this->_internal_dockercontainerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.HostID.dockerContainerID");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_dockercontainerid(), target);
  }

  // repeated string macAddresses = 8;
  for (int i = 0, n = this->_internal_macaddresses_size(); i < n; i++) {
    const auto& s = this->_internal_macaddresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.HostID.macAddresses");
    target = stream->WriteString(8, s, target);
  }

  // string herokuDynoID = 9;
  if (!this->_internal_herokudynoid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_herokudynoid().data(), static_cast<int>(this->_internal_herokudynoid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.HostID.herokuDynoID");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_herokudynoid(), target);
  }

  // string azAppServiceInstanceID = 10;
  if (!this->_internal_azappserviceinstanceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_azappserviceinstanceid().data(), static_cast<int>(this->_internal_azappserviceinstanceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.HostID.azAppServiceInstanceID");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_azappserviceinstanceid(), target);
  }

  // .collector.HostType hostType = 11;
  if (this->_internal_hosttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_hosttype(), target);
  }

  // string uamsClientID = 12;
  if (!this->_internal_uamsclientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uamsclientid().data(), static_cast<int>(this->_internal_uamsclientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.HostID.uamsClientID");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_uamsclientid(), target);
  }

  // .collector.Aws awsMetadata = 13;
  if (this->_internal_has_awsmetadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::awsmetadata(this),
        _Internal::awsmetadata(this).GetCachedSize(), target, stream);
  }

  // .collector.Azure azureMetadata = 14;
  if (this->_internal_has_azuremetadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::azuremetadata(this),
        _Internal::azuremetadata(this).GetCachedSize(), target, stream);
  }

  // .collector.K8s k8sMetadata = 15;
  if (this->_internal_has_k8smetadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::k8smetadata(this),
        _Internal::k8smetadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collector.HostID)
  return target;
}

size_t HostID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:collector.HostID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ip_addresses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ip_addresses_.size());
  for (int i = 0, n = _impl_.ip_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ip_addresses_.Get(i));
  }

  // repeated string macAddresses = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.macaddresses_.size());
  for (int i = 0, n = _impl_.macaddresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.macaddresses_.Get(i));
  }

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string uuid = 3;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string ec2InstanceID = 5;
  if (!this->_internal_ec2instanceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ec2instanceid());
  }

  // string ec2AvailabilityZone = 6;
  if (!this->_internal_ec2availabilityzone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ec2availabilityzone());
  }

  // string dockerContainerID = 7;
  if (!this->_internal_dockercontainerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dockercontainerid());
  }

  // string herokuDynoID = 9;
  if (!this->_internal_herokudynoid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_herokudynoid());
  }

  // string azAppServiceInstanceID = 10;
  if (!this->_internal_azappserviceinstanceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_azappserviceinstanceid());
  }

  // string uamsClientID = 12;
  if (!this->_internal_uamsclientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uamsclientid());
  }

  // .collector.Aws awsMetadata = 13;
  if (this->_internal_has_awsmetadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.awsmetadata_);
  }

  // .collector.Azure azureMetadata = 14;
  if (this->_internal_has_azuremetadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.azuremetadata_);
  }

  // .collector.K8s k8sMetadata = 15;
  if (this->_internal_has_k8smetadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.k8smetadata_);
  }

  // int32 pid = 4;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  // .collector.HostType hostType = 11;
  if (this->_internal_hosttype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_hosttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostID::GetClassData() const { return &_class_data_; }


void HostID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostID*>(&to_msg);
  auto& from = static_cast<const HostID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:collector.HostID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ip_addresses_.MergeFrom(from._impl_.ip_addresses_);
  _this->_impl_.macaddresses_.MergeFrom(from._impl_.macaddresses_);
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_ec2instanceid().empty()) {
    _this->_internal_set_ec2instanceid(from._internal_ec2instanceid());
  }
  if (!from._internal_ec2availabilityzone().empty()) {
    _this->_internal_set_ec2availabilityzone(from._internal_ec2availabilityzone());
  }
  if (!from._internal_dockercontainerid().empty()) {
    _this->_internal_set_dockercontainerid(from._internal_dockercontainerid());
  }
  if (!from._internal_herokudynoid().empty()) {
    _this->_internal_set_herokudynoid(from._internal_herokudynoid());
  }
  if (!from._internal_azappserviceinstanceid().empty()) {
    _this->_internal_set_azappserviceinstanceid(from._internal_azappserviceinstanceid());
  }
  if (!from._internal_uamsclientid().empty()) {
    _this->_internal_set_uamsclientid(from._internal_uamsclientid());
  }
  if (from._internal_has_awsmetadata()) {
    _this->_internal_mutable_awsmetadata()->::collector::Aws::MergeFrom(
        from._internal_awsmetadata());
  }
  if (from._internal_has_azuremetadata()) {
    _this->_internal_mutable_azuremetadata()->::collector::Azure::MergeFrom(
        from._internal_azuremetadata());
  }
  if (from._internal_has_k8smetadata()) {
    _this->_internal_mutable_k8smetadata()->::collector::K8s::MergeFrom(
        from._internal_k8smetadata());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_hosttype() != 0) {
    _this->_internal_set_hosttype(from._internal_hosttype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostID::CopyFrom(const HostID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collector.HostID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostID::IsInitialized() const {
  return true;
}

void HostID::InternalSwap(HostID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ip_addresses_.InternalSwap(&other->_impl_.ip_addresses_);
  _impl_.macaddresses_.InternalSwap(&other->_impl_.macaddresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ec2instanceid_, lhs_arena,
      &other->_impl_.ec2instanceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ec2availabilityzone_, lhs_arena,
      &other->_impl_.ec2availabilityzone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dockercontainerid_, lhs_arena,
      &other->_impl_.dockercontainerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.herokudynoid_, lhs_arena,
      &other->_impl_.herokudynoid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.azappserviceinstanceid_, lhs_arena,
      &other->_impl_.azappserviceinstanceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uamsclientid_, lhs_arena,
      &other->_impl_.uamsclientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostID, _impl_.hosttype_)
      + sizeof(HostID::_impl_.hosttype_)
      - PROTOBUF_FIELD_OFFSET(HostID, _impl_.awsmetadata_)>(
          reinterpret_cast<char*>(&_impl_.awsmetadata_),
          reinterpret_cast<char*>(&other->_impl_.awsmetadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collector_2eproto_getter, &descriptor_table_collector_2eproto_once,
      file_level_metadata_collector_2eproto[3]);
}

// ===================================================================

OboeSetting_ArgumentsEntry_DoNotUse::OboeSetting_ArgumentsEntry_DoNotUse() {}
OboeSetting_ArgumentsEntry_DoNotUse::OboeSetting_ArgumentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OboeSetting_ArgumentsEntry_DoNotUse::MergeFrom(const OboeSetting_ArgumentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OboeSetting_ArgumentsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collector_2eproto_getter, &descriptor_table_collector_2eproto_once,
      file_level_metadata_collector_2eproto[4]);
}

// ===================================================================

class OboeSetting::_Internal {
 public:
};

OboeSetting::OboeSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &OboeSetting::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:collector.OboeSetting)
}
OboeSetting::OboeSetting(const OboeSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OboeSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.arguments_)*/{}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.layer_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.ttl_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  _impl_.flags_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flags_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flags().empty()) {
    _this->_impl_.flags_.Set(from._internal_flags(), 
      _this->GetArenaForAllocation());
  }
  _impl_.layer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_layer().empty()) {
    _this->_impl_.layer_.Set(from._internal_layer(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:collector.OboeSetting)
}

inline void OboeSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.arguments_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.layer_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.value_){int64_t{0}}
    , decltype(_impl_.ttl_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.flags_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flags_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.layer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OboeSetting::~OboeSetting() {
  // @@protoc_insertion_point(destructor:collector.OboeSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void OboeSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arguments_.Destruct();
  _impl_.arguments_.~MapField();
  _impl_.flags_.Destroy();
  _impl_.layer_.Destroy();
}

void OboeSetting::ArenaDtor(void* object) {
  OboeSetting* _this = reinterpret_cast< OboeSetting* >(object);
  _this->_impl_.arguments_.Destruct();
}
void OboeSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OboeSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:collector.OboeSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arguments_.Clear();
  _impl_.flags_.ClearToEmpty();
  _impl_.layer_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OboeSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .collector.OboeSettingType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::collector::OboeSettingType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flags();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes layer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_layer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> arguments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.arguments_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 ttl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OboeSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:collector.OboeSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .collector.OboeSettingType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes flags = 2;
  if (!this->_internal_flags().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flags(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // int64 value = 4;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_value(), target);
  }

  // bytes layer = 5;
  if (!this->_internal_layer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_layer(), target);
  }

  // map<string, bytes> arguments = 7;
  if (!this->_internal_arguments().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = OboeSetting_ArgumentsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_arguments();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "collector.OboeSetting.ArgumentsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // int64 ttl = 8;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collector.OboeSetting)
  return target;
}

size_t OboeSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:collector.OboeSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> arguments = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_arguments_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_arguments().begin();
      it != this->_internal_arguments().end(); ++it) {
    total_size += OboeSetting_ArgumentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes flags = 2;
  if (!this->_internal_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // bytes layer = 5;
  if (!this->_internal_layer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_layer());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 value = 4;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  // int64 ttl = 8;
  if (this->_internal_ttl() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ttl());
  }

  // .collector.OboeSettingType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OboeSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OboeSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OboeSetting::GetClassData() const { return &_class_data_; }


void OboeSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OboeSetting*>(&to_msg);
  auto& from = static_cast<const OboeSetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:collector.OboeSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  if (!from._internal_flags().empty()) {
    _this->_internal_set_flags(from._internal_flags());
  }
  if (!from._internal_layer().empty()) {
    _this->_internal_set_layer(from._internal_layer());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_ttl() != 0) {
    _this->_internal_set_ttl(from._internal_ttl());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OboeSetting::CopyFrom(const OboeSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collector.OboeSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OboeSetting::IsInitialized() const {
  return true;
}

void OboeSetting::InternalSwap(OboeSetting* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flags_, lhs_arena,
      &other->_impl_.flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.layer_, lhs_arena,
      &other->_impl_.layer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OboeSetting, _impl_.type_)
      + sizeof(OboeSetting::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(OboeSetting, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OboeSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collector_2eproto_getter, &descriptor_table_collector_2eproto_once,
      file_level_metadata_collector_2eproto[5]);
}

// ===================================================================

class MessageRequest::_Internal {
 public:
  static const ::collector::HostID& identity(const MessageRequest* msg);
};

const ::collector::HostID&
MessageRequest::_Internal::identity(const MessageRequest* msg) {
  return *msg->_impl_.identity_;
}
MessageRequest::MessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:collector.MessageRequest)
}
MessageRequest::MessageRequest(const MessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.api_key_){}
    , decltype(_impl_.identity_){nullptr}
    , decltype(_impl_.encoding_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.api_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.api_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_api_key().empty()) {
    _this->_impl_.api_key_.Set(from._internal_api_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_identity()) {
    _this->_impl_.identity_ = new ::collector::HostID(*from._impl_.identity_);
  }
  _this->_impl_.encoding_ = from._impl_.encoding_;
  // @@protoc_insertion_point(copy_constructor:collector.MessageRequest)
}

inline void MessageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , decltype(_impl_.api_key_){}
    , decltype(_impl_.identity_){nullptr}
    , decltype(_impl_.encoding_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.api_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.api_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageRequest::~MessageRequest() {
  // @@protoc_insertion_point(destructor:collector.MessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
  _impl_.api_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.identity_;
}

void MessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:collector.MessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _impl_.api_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.identity_ != nullptr) {
    delete _impl_.identity_;
  }
  _impl_.identity_ = nullptr;
  _impl_.encoding_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string api_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_api_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.MessageRequest.api_key"));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .collector.EncodingType encoding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::collector::EncodingType>(val));
        } else
          goto handle_unusual;
        continue;
      // .collector.HostID identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:collector.MessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_key = 1;
  if (!this->_internal_api_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key().data(), static_cast<int>(this->_internal_api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.MessageRequest.api_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_api_key(), target);
  }

  // repeated bytes messages = 2;
  for (int i = 0, n = this->_internal_messages_size(); i < n; i++) {
    const auto& s = this->_internal_messages(i);
    target = stream->WriteBytes(2, s, target);
  }

  // .collector.EncodingType encoding = 3;
  if (this->_internal_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_encoding(), target);
  }

  // .collector.HostID identity = 4;
  if (this->_internal_has_identity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::identity(this),
        _Internal::identity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collector.MessageRequest)
  return target;
}

size_t MessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:collector.MessageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes messages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.messages_.size());
  for (int i = 0, n = _impl_.messages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.messages_.Get(i));
  }

  // string api_key = 1;
  if (!this->_internal_api_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key());
  }

  // .collector.HostID identity = 4;
  if (this->_internal_has_identity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identity_);
  }

  // .collector.EncodingType encoding = 3;
  if (this->_internal_encoding() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageRequest::GetClassData() const { return &_class_data_; }


void MessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageRequest*>(&to_msg);
  auto& from = static_cast<const MessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:collector.MessageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  if (!from._internal_api_key().empty()) {
    _this->_internal_set_api_key(from._internal_api_key());
  }
  if (from._internal_has_identity()) {
    _this->_internal_mutable_identity()->::collector::HostID::MergeFrom(
        from._internal_identity());
  }
  if (from._internal_encoding() != 0) {
    _this->_internal_set_encoding(from._internal_encoding());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageRequest::CopyFrom(const MessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collector.MessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRequest::IsInitialized() const {
  return true;
}

void MessageRequest::InternalSwap(MessageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.api_key_, lhs_arena,
      &other->_impl_.api_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageRequest, _impl_.encoding_)
      + sizeof(MessageRequest::_impl_.encoding_)
      - PROTOBUF_FIELD_OFFSET(MessageRequest, _impl_.identity_)>(
          reinterpret_cast<char*>(&_impl_.identity_),
          reinterpret_cast<char*>(&other->_impl_.identity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collector_2eproto_getter, &descriptor_table_collector_2eproto_once,
      file_level_metadata_collector_2eproto[6]);
}

// ===================================================================

class MessageResult::_Internal {
 public:
};

MessageResult::MessageResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:collector.MessageResult)
}
MessageResult::MessageResult(const MessageResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arg_){}
    , decltype(_impl_.warning_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.arg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arg().empty()) {
    _this->_impl_.arg_.Set(from._internal_arg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.warning_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.warning_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_warning().empty()) {
    _this->_impl_.warning_.Set(from._internal_warning(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:collector.MessageResult)
}

inline void MessageResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arg_){}
    , decltype(_impl_.warning_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.arg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.warning_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.warning_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageResult::~MessageResult() {
  // @@protoc_insertion_point(destructor:collector.MessageResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arg_.Destroy();
  _impl_.warning_.Destroy();
}

void MessageResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageResult::Clear() {
// @@protoc_insertion_point(message_clear_start:collector.MessageResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arg_.ClearToEmpty();
  _impl_.warning_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .collector.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::collector::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_arg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.MessageResult.arg"));
        } else
          goto handle_unusual;
        continue;
      // string warning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_warning();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.MessageResult.warning"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:collector.MessageResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .collector.ResultCode result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string arg = 2;
  if (!this->_internal_arg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arg().data(), static_cast<int>(this->_internal_arg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.MessageResult.arg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_arg(), target);
  }

  // string warning = 4;
  if (!this->_internal_warning().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_warning().data(), static_cast<int>(this->_internal_warning().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.MessageResult.warning");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_warning(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collector.MessageResult)
  return target;
}

size_t MessageResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:collector.MessageResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string arg = 2;
  if (!this->_internal_arg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arg());
  }

  // string warning = 4;
  if (!this->_internal_warning().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_warning());
  }

  // .collector.ResultCode result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageResult::GetClassData() const { return &_class_data_; }


void MessageResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageResult*>(&to_msg);
  auto& from = static_cast<const MessageResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:collector.MessageResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_arg().empty()) {
    _this->_internal_set_arg(from._internal_arg());
  }
  if (!from._internal_warning().empty()) {
    _this->_internal_set_warning(from._internal_warning());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageResult::CopyFrom(const MessageResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collector.MessageResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResult::IsInitialized() const {
  return true;
}

void MessageResult::InternalSwap(MessageResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arg_, lhs_arena,
      &other->_impl_.arg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.warning_, lhs_arena,
      &other->_impl_.warning_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collector_2eproto_getter, &descriptor_table_collector_2eproto_once,
      file_level_metadata_collector_2eproto[7]);
}

// ===================================================================

class SettingsRequest::_Internal {
 public:
  static const ::collector::HostID& identity(const SettingsRequest* msg);
};

const ::collector::HostID&
SettingsRequest::_Internal::identity(const SettingsRequest* msg) {
  return *msg->_impl_.identity_;
}
SettingsRequest::SettingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:collector.SettingsRequest)
}
SettingsRequest::SettingsRequest(const SettingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SettingsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.api_key_){}
    , decltype(_impl_.clientversion_){}
    , decltype(_impl_.identity_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.api_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.api_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_api_key().empty()) {
    _this->_impl_.api_key_.Set(from._internal_api_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientversion().empty()) {
    _this->_impl_.clientversion_.Set(from._internal_clientversion(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_identity()) {
    _this->_impl_.identity_ = new ::collector::HostID(*from._impl_.identity_);
  }
  // @@protoc_insertion_point(copy_constructor:collector.SettingsRequest)
}

inline void SettingsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.api_key_){}
    , decltype(_impl_.clientversion_){}
    , decltype(_impl_.identity_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.api_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.api_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SettingsRequest::~SettingsRequest() {
  // @@protoc_insertion_point(destructor:collector.SettingsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SettingsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.api_key_.Destroy();
  _impl_.clientversion_.Destroy();
  if (this != internal_default_instance()) delete _impl_.identity_;
}

void SettingsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SettingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:collector.SettingsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.api_key_.ClearToEmpty();
  _impl_.clientversion_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.identity_ != nullptr) {
    delete _impl_.identity_;
  }
  _impl_.identity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string api_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_api_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.SettingsRequest.api_key"));
        } else
          goto handle_unusual;
        continue;
      // .collector.HostID identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.SettingsRequest.clientVersion"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SettingsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:collector.SettingsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_key = 1;
  if (!this->_internal_api_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key().data(), static_cast<int>(this->_internal_api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.SettingsRequest.api_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_api_key(), target);
  }

  // .collector.HostID identity = 2;
  if (this->_internal_has_identity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::identity(this),
        _Internal::identity(this).GetCachedSize(), target, stream);
  }

  // string clientVersion = 3;
  if (!this->_internal_clientversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientversion().data(), static_cast<int>(this->_internal_clientversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.SettingsRequest.clientVersion");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collector.SettingsRequest)
  return target;
}

size_t SettingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:collector.SettingsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string api_key = 1;
  if (!this->_internal_api_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key());
  }

  // string clientVersion = 3;
  if (!this->_internal_clientversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientversion());
  }

  // .collector.HostID identity = 2;
  if (this->_internal_has_identity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identity_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SettingsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SettingsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SettingsRequest::GetClassData() const { return &_class_data_; }


void SettingsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SettingsRequest*>(&to_msg);
  auto& from = static_cast<const SettingsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:collector.SettingsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_api_key().empty()) {
    _this->_internal_set_api_key(from._internal_api_key());
  }
  if (!from._internal_clientversion().empty()) {
    _this->_internal_set_clientversion(from._internal_clientversion());
  }
  if (from._internal_has_identity()) {
    _this->_internal_mutable_identity()->::collector::HostID::MergeFrom(
        from._internal_identity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SettingsRequest::CopyFrom(const SettingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collector.SettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsRequest::IsInitialized() const {
  return true;
}

void SettingsRequest::InternalSwap(SettingsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.api_key_, lhs_arena,
      &other->_impl_.api_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientversion_, lhs_arena,
      &other->_impl_.clientversion_, rhs_arena
  );
  swap(_impl_.identity_, other->_impl_.identity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collector_2eproto_getter, &descriptor_table_collector_2eproto_once,
      file_level_metadata_collector_2eproto[8]);
}

// ===================================================================

class SettingsResult::_Internal {
 public:
};

SettingsResult::SettingsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:collector.SettingsResult)
}
SettingsResult::SettingsResult(const SettingsResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SettingsResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.settings_){from._impl_.settings_}
    , decltype(_impl_.arg_){}
    , decltype(_impl_.warning_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.arg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arg().empty()) {
    _this->_impl_.arg_.Set(from._internal_arg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.warning_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.warning_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_warning().empty()) {
    _this->_impl_.warning_.Set(from._internal_warning(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:collector.SettingsResult)
}

inline void SettingsResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.settings_){arena}
    , decltype(_impl_.arg_){}
    , decltype(_impl_.warning_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.arg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.warning_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.warning_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SettingsResult::~SettingsResult() {
  // @@protoc_insertion_point(destructor:collector.SettingsResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SettingsResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.settings_.~RepeatedPtrField();
  _impl_.arg_.Destroy();
  _impl_.warning_.Destroy();
}

void SettingsResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SettingsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:collector.SettingsResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.settings_.Clear();
  _impl_.arg_.ClearToEmpty();
  _impl_.warning_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingsResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .collector.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::collector::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_arg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.SettingsResult.arg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .collector.OboeSetting settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string warning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_warning();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.SettingsResult.warning"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SettingsResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:collector.SettingsResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .collector.ResultCode result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string arg = 2;
  if (!this->_internal_arg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arg().data(), static_cast<int>(this->_internal_arg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.SettingsResult.arg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_arg(), target);
  }

  // repeated .collector.OboeSetting settings = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_settings_size()); i < n; i++) {
    const auto& repfield = this->_internal_settings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string warning = 4;
  if (!this->_internal_warning().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_warning().data(), static_cast<int>(this->_internal_warning().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.SettingsResult.warning");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_warning(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collector.SettingsResult)
  return target;
}

size_t SettingsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:collector.SettingsResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .collector.OboeSetting settings = 3;
  total_size += 1UL * this->_internal_settings_size();
  for (const auto& msg : this->_impl_.settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string arg = 2;
  if (!this->_internal_arg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arg());
  }

  // string warning = 4;
  if (!this->_internal_warning().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_warning());
  }

  // .collector.ResultCode result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SettingsResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SettingsResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SettingsResult::GetClassData() const { return &_class_data_; }


void SettingsResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SettingsResult*>(&to_msg);
  auto& from = static_cast<const SettingsResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:collector.SettingsResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.settings_.MergeFrom(from._impl_.settings_);
  if (!from._internal_arg().empty()) {
    _this->_internal_set_arg(from._internal_arg());
  }
  if (!from._internal_warning().empty()) {
    _this->_internal_set_warning(from._internal_warning());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SettingsResult::CopyFrom(const SettingsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collector.SettingsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsResult::IsInitialized() const {
  return true;
}

void SettingsResult::InternalSwap(SettingsResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.settings_.InternalSwap(&other->_impl_.settings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arg_, lhs_arena,
      &other->_impl_.arg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.warning_, lhs_arena,
      &other->_impl_.warning_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collector_2eproto_getter, &descriptor_table_collector_2eproto_once,
      file_level_metadata_collector_2eproto[9]);
}

// ===================================================================

class PingRequest::_Internal {
 public:
};

PingRequest::PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:collector.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.api_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.api_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.api_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_api_key().empty()) {
    _this->_impl_.api_key_.Set(from._internal_api_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:collector.PingRequest)
}

inline void PingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.api_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.api_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.api_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:collector.PingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.api_key_.Destroy();
}

void PingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:collector.PingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.api_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string api_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_api_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "collector.PingRequest.api_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:collector.PingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_key = 1;
  if (!this->_internal_api_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_key().data(), static_cast<int>(this->_internal_api_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "collector.PingRequest.api_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_api_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collector.PingRequest)
  return target;
}

size_t PingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:collector.PingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string api_key = 1;
  if (!this->_internal_api_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingRequest::GetClassData() const { return &_class_data_; }


void PingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PingRequest*>(&to_msg);
  auto& from = static_cast<const PingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:collector.PingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_api_key().empty()) {
    _this->_internal_set_api_key(from._internal_api_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingRequest::CopyFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collector.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  return true;
}

void PingRequest::InternalSwap(PingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.api_key_, lhs_arena,
      &other->_impl_.api_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collector_2eproto_getter, &descriptor_table_collector_2eproto_once,
      file_level_metadata_collector_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace collector
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::collector::Aws*
Arena::CreateMaybeMessage< ::collector::Aws >(Arena* arena) {
  return Arena::CreateMessageInternal< ::collector::Aws >(arena);
}
template<> PROTOBUF_NOINLINE ::collector::Azure*
Arena::CreateMaybeMessage< ::collector::Azure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::collector::Azure >(arena);
}
template<> PROTOBUF_NOINLINE ::collector::K8s*
Arena::CreateMaybeMessage< ::collector::K8s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::collector::K8s >(arena);
}
template<> PROTOBUF_NOINLINE ::collector::HostID*
Arena::CreateMaybeMessage< ::collector::HostID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::collector::HostID >(arena);
}
template<> PROTOBUF_NOINLINE ::collector::OboeSetting_ArgumentsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::collector::OboeSetting_ArgumentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::collector::OboeSetting_ArgumentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::collector::OboeSetting*
Arena::CreateMaybeMessage< ::collector::OboeSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::collector::OboeSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::collector::MessageRequest*
Arena::CreateMaybeMessage< ::collector::MessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::collector::MessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::collector::MessageResult*
Arena::CreateMaybeMessage< ::collector::MessageResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::collector::MessageResult >(arena);
}
template<> PROTOBUF_NOINLINE ::collector::SettingsRequest*
Arena::CreateMaybeMessage< ::collector::SettingsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::collector::SettingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::collector::SettingsResult*
Arena::CreateMaybeMessage< ::collector::SettingsResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::collector::SettingsResult >(arena);
}
template<> PROTOBUF_NOINLINE ::collector::PingRequest*
Arena::CreateMaybeMessage< ::collector::PingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::collector::PingRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
