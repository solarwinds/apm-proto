//*
// This file defines the RPC between APM libraries and the collector

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: collector.proto

package collectorpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Represents the result code from collector
type ResultCode int32

const (
	ResultCode_OK              ResultCode = 0 // means OK
	ResultCode_TRY_LATER       ResultCode = 1 // APM library will retry the request later
	ResultCode_INVALID_API_KEY ResultCode = 2 // obsolete, removed handling in this [PR](https://github.com/librato/oboe/pull/720)
	ResultCode_LIMIT_EXCEEDED  ResultCode = 3 // APM library will retry the request later
	ResultCode_REDIRECT        ResultCode = 4 // obsolete, removed handling in this [PR](https://github.com/librato/oboe/pull/720)
)

// Enum value maps for ResultCode.
var (
	ResultCode_name = map[int32]string{
		0: "OK",
		1: "TRY_LATER",
		2: "INVALID_API_KEY",
		3: "LIMIT_EXCEEDED",
		4: "REDIRECT",
	}
	ResultCode_value = map[string]int32{
		"OK":              0,
		"TRY_LATER":       1,
		"INVALID_API_KEY": 2,
		"LIMIT_EXCEEDED":  3,
		"REDIRECT":        4,
	}
)

func (x ResultCode) Enum() *ResultCode {
	p := new(ResultCode)
	*p = x
	return p
}

func (x ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_collector_proto_enumTypes[0].Descriptor()
}

func (ResultCode) Type() protoreflect.EnumType {
	return &file_collector_proto_enumTypes[0]
}

func (x ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultCode.Descriptor instead.
func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{0}
}

// *
// Represents the encoding type of messages
type EncodingType int32

const (
	EncodingType_BSON     EncodingType = 0 // binary JSON
	EncodingType_PROTOBUF EncodingType = 1 // obsolete
)

// Enum value maps for EncodingType.
var (
	EncodingType_name = map[int32]string{
		0: "BSON",
		1: "PROTOBUF",
	}
	EncodingType_value = map[string]int32{
		"BSON":     0,
		"PROTOBUF": 1,
	}
)

func (x EncodingType) Enum() *EncodingType {
	p := new(EncodingType)
	*p = x
	return p
}

func (x EncodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_collector_proto_enumTypes[1].Descriptor()
}

func (EncodingType) Type() protoreflect.EnumType {
	return &file_collector_proto_enumTypes[1]
}

func (x EncodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodingType.Descriptor instead.
func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{1}
}

// *
// Represents the host type the APM library is running in.
type HostType int32

const (
	HostType_PERSISTENT HostType = 0 // persistent host type
	HostType_AWS_LAMBDA HostType = 1 // [ao-only] AWS Lambda function
)

// Enum value maps for HostType.
var (
	HostType_name = map[int32]string{
		0: "PERSISTENT",
		1: "AWS_LAMBDA",
	}
	HostType_value = map[string]int32{
		"PERSISTENT": 0,
		"AWS_LAMBDA": 1,
	}
)

func (x HostType) Enum() *HostType {
	p := new(HostType)
	*p = x
	return p
}

func (x HostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostType) Descriptor() protoreflect.EnumDescriptor {
	return file_collector_proto_enumTypes[2].Descriptor()
}

func (HostType) Type() protoreflect.EnumType {
	return &file_collector_proto_enumTypes[2]
}

func (x HostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostType.Descriptor instead.
func (HostType) EnumDescriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{2}
}

// *
// Represents oboe setting type
type OboeSettingType int32

const (
	OboeSettingType_DEFAULT_SAMPLE_RATE        OboeSettingType = 0 // DEFAULT_SAMPLE_RATE
	OboeSettingType_LAYER_SAMPLE_RATE          OboeSettingType = 1 // obsolete
	OboeSettingType_LAYER_APP_SAMPLE_RATE      OboeSettingType = 2 // obsolete
	OboeSettingType_LAYER_HTTPHOST_SAMPLE_RATE OboeSettingType = 3 // obsolete
	OboeSettingType_CONFIG_STRING              OboeSettingType = 4 // obsolete
	OboeSettingType_CONFIG_INT                 OboeSettingType = 5 // obsolete
)

// Enum value maps for OboeSettingType.
var (
	OboeSettingType_name = map[int32]string{
		0: "DEFAULT_SAMPLE_RATE",
		1: "LAYER_SAMPLE_RATE",
		2: "LAYER_APP_SAMPLE_RATE",
		3: "LAYER_HTTPHOST_SAMPLE_RATE",
		4: "CONFIG_STRING",
		5: "CONFIG_INT",
	}
	OboeSettingType_value = map[string]int32{
		"DEFAULT_SAMPLE_RATE":        0,
		"LAYER_SAMPLE_RATE":          1,
		"LAYER_APP_SAMPLE_RATE":      2,
		"LAYER_HTTPHOST_SAMPLE_RATE": 3,
		"CONFIG_STRING":              4,
		"CONFIG_INT":                 5,
	}
)

func (x OboeSettingType) Enum() *OboeSettingType {
	p := new(OboeSettingType)
	*p = x
	return p
}

func (x OboeSettingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OboeSettingType) Descriptor() protoreflect.EnumDescriptor {
	return file_collector_proto_enumTypes[3].Descriptor()
}

func (OboeSettingType) Type() protoreflect.EnumType {
	return &file_collector_proto_enumTypes[3]
}

func (x OboeSettingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OboeSettingType.Descriptor instead.
func (OboeSettingType) EnumDescriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{3}
}

// *
// Represents AWS metadata from [Instance Metadata Service IMDS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
type Aws struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudProvider         string `protobuf:"bytes,1,opt,name=cloudProvider,proto3" json:"cloudProvider,omitempty"`                 // always `aws`
	CloudPlatform         string `protobuf:"bytes,2,opt,name=cloudPlatform,proto3" json:"cloudPlatform,omitempty"`                 // always `aws_ec2`
	CloudAccountId        string `protobuf:"bytes,3,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`               // `accountId` in IMDS metadata
	CloudRegion           string `protobuf:"bytes,4,opt,name=cloudRegion,proto3" json:"cloudRegion,omitempty"`                     // `region` in IMDS metadata
	CloudAvailabilityZone string `protobuf:"bytes,5,opt,name=cloudAvailabilityZone,proto3" json:"cloudAvailabilityZone,omitempty"` // `availabilityZone` in IMDS metadata
	HostId                string `protobuf:"bytes,6,opt,name=hostId,proto3" json:"hostId,omitempty"`                               // `instanceId` in IMDS metadata
	HostImageId           string `protobuf:"bytes,7,opt,name=hostImageId,proto3" json:"hostImageId,omitempty"`                     // `imageId` in IMDS metadata
	HostName              string `protobuf:"bytes,8,opt,name=hostName,proto3" json:"hostName,omitempty"`                           // hostname from either [gethostname() in Linux](https://man7.org/linux/man-pages/man2/gethostname.2.html) or [gethostname() in Windows](https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-gethostname)
	HostType              string `protobuf:"bytes,9,opt,name=hostType,proto3" json:"hostType,omitempty"`                           // `instanceType` in IMDS metadata
}

func (x *Aws) Reset() {
	*x = Aws{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aws) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aws) ProtoMessage() {}

func (x *Aws) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aws.ProtoReflect.Descriptor instead.
func (*Aws) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{0}
}

func (x *Aws) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *Aws) GetCloudPlatform() string {
	if x != nil {
		return x.CloudPlatform
	}
	return ""
}

func (x *Aws) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *Aws) GetCloudRegion() string {
	if x != nil {
		return x.CloudRegion
	}
	return ""
}

func (x *Aws) GetCloudAvailabilityZone() string {
	if x != nil {
		return x.CloudAvailabilityZone
	}
	return ""
}

func (x *Aws) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *Aws) GetHostImageId() string {
	if x != nil {
		return x.HostImageId
	}
	return ""
}

func (x *Aws) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Aws) GetHostType() string {
	if x != nil {
		return x.HostType
	}
	return ""
}

// *
// Represents Azure metadata from [Instance Metadata Service IMDS](https://learn.microsoft.com/en-us/azure/virtual-machines/instance-metadata-service?tabs=linux)
type Azure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudProvider          string `protobuf:"bytes,1,opt,name=cloudProvider,proto3" json:"cloudProvider,omitempty"`                    // always `azure`
	CloudPlatform          string `protobuf:"bytes,2,opt,name=cloudPlatform,proto3" json:"cloudPlatform,omitempty"`                    // always `azure_vm`
	CloudRegion            string `protobuf:"bytes,3,opt,name=cloudRegion,proto3" json:"cloudRegion,omitempty"`                        // `location` in IMDS metadata
	CloudAccountId         string `protobuf:"bytes,4,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`                  // `subscriptionId` in IMDS metadata
	HostId                 string `protobuf:"bytes,5,opt,name=hostId,proto3" json:"hostId,omitempty"`                                  // `vmId` in IMDS metadata
	HostName               string `protobuf:"bytes,6,opt,name=hostName,proto3" json:"hostName,omitempty"`                              // `name` in IMDS metadata
	AzureVmName            string `protobuf:"bytes,7,opt,name=azureVmName,proto3" json:"azureVmName,omitempty"`                        // `name` in IMDS metadata
	AzureVmSize            string `protobuf:"bytes,8,opt,name=azureVmSize,proto3" json:"azureVmSize,omitempty"`                        // `vmSize` in IMDS metadata
	AzureVmScaleSetName    string `protobuf:"bytes,9,opt,name=azureVmScaleSetName,proto3" json:"azureVmScaleSetName,omitempty"`        // `vmScaleSetName` in IMDS metadata
	AzureResourceGroupName string `protobuf:"bytes,10,opt,name=azureResourceGroupName,proto3" json:"azureResourceGroupName,omitempty"` // `resourceGroupName` in IMDS metadata
}

func (x *Azure) Reset() {
	*x = Azure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Azure) ProtoMessage() {}

func (x *Azure) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Azure.ProtoReflect.Descriptor instead.
func (*Azure) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{1}
}

func (x *Azure) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *Azure) GetCloudPlatform() string {
	if x != nil {
		return x.CloudPlatform
	}
	return ""
}

func (x *Azure) GetCloudRegion() string {
	if x != nil {
		return x.CloudRegion
	}
	return ""
}

func (x *Azure) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *Azure) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *Azure) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Azure) GetAzureVmName() string {
	if x != nil {
		return x.AzureVmName
	}
	return ""
}

func (x *Azure) GetAzureVmSize() string {
	if x != nil {
		return x.AzureVmSize
	}
	return ""
}

func (x *Azure) GetAzureVmScaleSetName() string {
	if x != nil {
		return x.AzureVmScaleSetName
	}
	return ""
}

func (x *Azure) GetAzureResourceGroupName() string {
	if x != nil {
		return x.AzureResourceGroupName
	}
	return ""
}

// *
// Represents k8s metadata
type K8S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"` // equivalent to [k8s.namespace.name](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/k8s.md#namespace). The content from `/run/secrets/kubernetes.io/serviceaccount/namespace`
	PodName   string `protobuf:"bytes,2,opt,name=podName,proto3" json:"podName,omitempty"`     // equivalent to [k8s.pod.name](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/k8s.md#pod). hostname from `gethostname()` function call
	PodUid    string `protobuf:"bytes,3,opt,name=podUid,proto3" json:"podUid,omitempty"`       // equivalent to [k8s.pod.uid](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/k8s.md#pod). Parsed from `/proc/self/mountinfo` using best effort
}

func (x *K8S) Reset() {
	*x = K8S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8S) ProtoMessage() {}

func (x *K8S) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8S.ProtoReflect.Descriptor instead.
func (*K8S) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{2}
}

func (x *K8S) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *K8S) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *K8S) GetPodUid() string {
	if x != nil {
		return x.PodUid
	}
	return ""
}

// *
// Represents the host metadata needed to infer entity and make correlations from trace telemetry.
type HostID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname               string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`                              // hostname from either [gethostname() in Linux](https://man7.org/linux/man-pages/man2/gethostname.2.html) or [gethostname() in Windows](https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-gethostname). Java agent will not refresh hostname for now to avoid spawning excessive processes.
	IpAddresses            []string `protobuf:"bytes,2,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`     // obsolete
	Uuid                   string   `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`                                      // [swo only] A random (version 4) UUID generated on application instance startup, analogous to the [OTel Resource attribute](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/README.md#service) `service.instance.id`, e.g. `51fcbc02-670e-454f-84d1-124a500a2646`, `f620e874-ff3d-4f33-825d-cc4b12b2d005`
	Pid                    int32    `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`                                       // process id from either [getpid()](https://man7.org/linux/man-pages/man2/getpid.2.html) or [GetCurrentProcessId()](https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocessid)
	Ec2InstanceID          string   `protobuf:"bytes,5,opt,name=ec2InstanceID,proto3" json:"ec2InstanceID,omitempty"`                    // `instanceId` in AWS EC2 IMDS metadata
	Ec2AvailabilityZone    string   `protobuf:"bytes,6,opt,name=ec2AvailabilityZone,proto3" json:"ec2AvailabilityZone,omitempty"`        // `availabilityZone` in AWS EC2 IMDS metadata
	DockerContainerID      string   `protobuf:"bytes,7,opt,name=dockerContainerID,proto3" json:"dockerContainerID,omitempty"`            // container id from `/proc/self/cgroup` for cgroups v1
	MacAddresses           []string `protobuf:"bytes,8,rep,name=macAddresses,proto3" json:"macAddresses,omitempty"`                      // mac addresses for physical interfaces, skipping point-to-point and interfaces w/o IP address from either [getifaddrs(...)](https://man7.org/linux/man-pages/man3/getifaddrs.3.html) or [GetAdaptersAddresses(...)](https://learn.microsoft.com/en-us/windows/win32/api/iphlpapi/nf-iphlpapi-getadaptersaddresses)
	HerokuDynoID           string   `protobuf:"bytes,9,opt,name=herokuDynoID,proto3" json:"herokuDynoID,omitempty"`                      // [heroku dyno id](https://devcenter.heroku.com/articles/dynos#local-environment-variables) from environment variable `DYNO`
	AzAppServiceInstanceID string   `protobuf:"bytes,10,opt,name=azAppServiceInstanceID,proto3" json:"azAppServiceInstanceID,omitempty"` // Azure App Service `WEBSITE_INSTANCE_ID` which is the [unique ID of the current VM instance](https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#scaling)
	HostType               HostType `protobuf:"varint,11,opt,name=hostType,proto3,enum=collector.HostType" json:"hostType,omitempty"`    // host type struct
	UamsClientID           string   `protobuf:"bytes,12,opt,name=uamsClientID,proto3" json:"uamsClientID,omitempty"`                     // [swo only] [uamsclientid](https://swicloud.atlassian.net/wiki/spaces/arch/pages/2963917281/FAS+-+Universal+AMS+Client+-+Unique+Identification) exposed to the APM library for [Service-to-Host correlation](https://swicloud.atlassian.net/wiki/spaces/NIT/pages/2858778658/FAS+Topology+Map+Data+-+UAMS+APM+on-prem#UAMS-Client-Id-management). It is read from `/opt/solarwinds/uamsclient/var/uamsclientid` or `C:\ProgramData\SolarWinds\UAMSClient\uamsclientid`. Windows path may be different depending on the setup. If not found, it is retrieved from `http://127.0.0.1:2113/info/uamsclient` uamsclient_id property
	AwsMetadata            *Aws     `protobuf:"bytes,13,opt,name=awsMetadata,proto3" json:"awsMetadata,omitempty"`                       // [swo only] aws ec2 metadata from IMDS
	AzureMetadata          *Azure   `protobuf:"bytes,14,opt,name=azureMetadata,proto3" json:"azureMetadata,omitempty"`                   // [swo only] azure metadata from IMDS
	K8SMetadata            *K8S     `protobuf:"bytes,15,opt,name=k8sMetadata,proto3" json:"k8sMetadata,omitempty"`                       // [swo only] k8s metadata
}

func (x *HostID) Reset() {
	*x = HostID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostID) ProtoMessage() {}

func (x *HostID) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostID.ProtoReflect.Descriptor instead.
func (*HostID) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{3}
}

func (x *HostID) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostID) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *HostID) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *HostID) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *HostID) GetEc2InstanceID() string {
	if x != nil {
		return x.Ec2InstanceID
	}
	return ""
}

func (x *HostID) GetEc2AvailabilityZone() string {
	if x != nil {
		return x.Ec2AvailabilityZone
	}
	return ""
}

func (x *HostID) GetDockerContainerID() string {
	if x != nil {
		return x.DockerContainerID
	}
	return ""
}

func (x *HostID) GetMacAddresses() []string {
	if x != nil {
		return x.MacAddresses
	}
	return nil
}

func (x *HostID) GetHerokuDynoID() string {
	if x != nil {
		return x.HerokuDynoID
	}
	return ""
}

func (x *HostID) GetAzAppServiceInstanceID() string {
	if x != nil {
		return x.AzAppServiceInstanceID
	}
	return ""
}

func (x *HostID) GetHostType() HostType {
	if x != nil {
		return x.HostType
	}
	return HostType_PERSISTENT
}

func (x *HostID) GetUamsClientID() string {
	if x != nil {
		return x.UamsClientID
	}
	return ""
}

func (x *HostID) GetAwsMetadata() *Aws {
	if x != nil {
		return x.AwsMetadata
	}
	return nil
}

func (x *HostID) GetAzureMetadata() *Azure {
	if x != nil {
		return x.AzureMetadata
	}
	return nil
}

func (x *HostID) GetK8SMetadata() *K8S {
	if x != nil {
		return x.K8SMetadata
	}
	return nil
}

// *
// Represents oboe setting message
type OboeSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      OboeSettingType   `protobuf:"varint,1,opt,name=type,proto3,enum=collector.OboeSettingType" json:"type,omitempty"`                                                                   // oboe setting type struct, always DEFAULT_SAMPLE_RATE
	Flags     []byte            `protobuf:"bytes,2,opt,name=flags,proto3" json:"flags,omitempty"`                                                                                                 // flags where { OK=0x0, INVALID=0x1, OVERRIDE=0x2, SAMPLE_START=0x4, SAMPLE_THROUGH=0x8, SAMPLE_THROUGH_ALWAYS=0x10, TRIGGERED_TRACE=0x20 }. e.g. 54 means OK or OVERRIDE or SAMPLE_START or SAMPLE_THROUGH_ALWAYS or TRIGGERED_TRACE
	Timestamp int64             `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                                        // Epoch timestamp
	Value     int64             `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`                                                                                                // Sampling rate, 1000000 means 100%
	Layer     []byte            `protobuf:"bytes,5,opt,name=layer,proto3" json:"layer,omitempty"`                                                                                                 // layer name, not set since type is always DEFAULT_SAMPLE_RATE
	Arguments map[string][]byte `protobuf:"bytes,7,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key-value pairs. Keys can be [`BucketCapacity`, `BucketRate`, `TriggerRelaxedBucketCapacity`, `TriggerRelaxedBucketRate`, `TriggerStrictBucketCapacity`, `TriggerStrictBucketRate`, `SignatureKey`]
	Ttl       int64             `protobuf:"varint,8,opt,name=ttl,proto3" json:"ttl,omitempty"`                                                                                                    // time to live for this setting struct
}

func (x *OboeSetting) Reset() {
	*x = OboeSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OboeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OboeSetting) ProtoMessage() {}

func (x *OboeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OboeSetting.ProtoReflect.Descriptor instead.
func (*OboeSetting) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{4}
}

func (x *OboeSetting) GetType() OboeSettingType {
	if x != nil {
		return x.Type
	}
	return OboeSettingType_DEFAULT_SAMPLE_RATE
}

func (x *OboeSetting) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *OboeSetting) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OboeSetting) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *OboeSetting) GetLayer() []byte {
	if x != nil {
		return x.Layer
	}
	return nil
}

func (x *OboeSetting) GetArguments() map[string][]byte {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *OboeSetting) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// *
// Represents the message request
type MessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey   string       `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`                    // the Service Key provided by the customer to authenticate and identify the tenant and service the message is destined for. It is a string composed of two parts, an API token and a descriptive service name, separated by a colon `:`. Example: `qwertyuiop1234567:my_cool_service`.
	Messages [][]byte     `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`                              // bson messages
	Encoding EncodingType `protobuf:"varint,3,opt,name=encoding,proto3,enum=collector.EncodingType" json:"encoding,omitempty"` // always `EncodingType::BSON`
	Identity *HostID      `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`                              // host id
}

func (x *MessageRequest) Reset() {
	*x = MessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRequest) ProtoMessage() {}

func (x *MessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRequest.ProtoReflect.Descriptor instead.
func (*MessageRequest) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{5}
}

func (x *MessageRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *MessageRequest) GetMessages() [][]byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessageRequest) GetEncoding() EncodingType {
	if x != nil {
		return x.Encoding
	}
	return EncodingType_BSON
}

func (x *MessageRequest) GetIdentity() *HostID {
	if x != nil {
		return x.Identity
	}
	return nil
}

// *
// Represents the message results
type MessageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  ResultCode `protobuf:"varint,1,opt,name=result,proto3,enum=collector.ResultCode" json:"result,omitempty"` // result code from the collector
	Arg     string     `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`                                  // obsolete
	Warning string     `protobuf:"bytes,4,opt,name=warning,proto3" json:"warning,omitempty"`                          // user-facing warning message. The APM library attempts to squelch repeated warnings, so care should be taken to ensure that warning messages are consistent across all RPCs.
}

func (x *MessageResult) Reset() {
	*x = MessageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageResult) ProtoMessage() {}

func (x *MessageResult) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageResult.ProtoReflect.Descriptor instead.
func (*MessageResult) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{6}
}

func (x *MessageResult) GetResult() ResultCode {
	if x != nil {
		return x.Result
	}
	return ResultCode_OK
}

func (x *MessageResult) GetArg() string {
	if x != nil {
		return x.Arg
	}
	return ""
}

func (x *MessageResult) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

// *
// Represents the settings request
type SettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey        string  `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"` // the Service Key provided by the customer to authenticate and identify the tenant and service the message is destined for. It is a string composed of two parts, an API token and a descriptive service name, separated by a colon `:`. Example: `qwertyuiop1234567:my_cool_service`.
	Identity      *HostID `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`           // host id, only the `hostname` field needs to be set, all the other fields should be left empty.
	ClientVersion string  `protobuf:"bytes,3,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"` // always `2`
}

func (x *SettingsRequest) Reset() {
	*x = SettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsRequest) ProtoMessage() {}

func (x *SettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsRequest.ProtoReflect.Descriptor instead.
func (*SettingsRequest) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{7}
}

func (x *SettingsRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *SettingsRequest) GetIdentity() *HostID {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SettingsRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

// *
// Represents the settings result
type SettingsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   ResultCode     `protobuf:"varint,1,opt,name=result,proto3,enum=collector.ResultCode" json:"result,omitempty"` // result code from the collector
	Arg      string         `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`                                  // obsolete
	Settings []*OboeSetting `protobuf:"bytes,3,rep,name=settings,proto3" json:"settings,omitempty"`                        // sampling settings
	Warning  string         `protobuf:"bytes,4,opt,name=warning,proto3" json:"warning,omitempty"`                          // user-facing warning message. The APM library attempts to squelch repeated warnings, so care should be taken to ensure that warning messages are consistent across all RPCs.
}

func (x *SettingsResult) Reset() {
	*x = SettingsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsResult) ProtoMessage() {}

func (x *SettingsResult) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsResult.ProtoReflect.Descriptor instead.
func (*SettingsResult) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{8}
}

func (x *SettingsResult) GetResult() ResultCode {
	if x != nil {
		return x.Result
	}
	return ResultCode_OK
}

func (x *SettingsResult) GetArg() string {
	if x != nil {
		return x.Arg
	}
	return ""
}

func (x *SettingsResult) GetSettings() []*OboeSetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *SettingsResult) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

// *
// Represents the ping request
type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"` // the Service Key provided by the customer to authenticate and identify the tenant and service the message is destined for. It is a string composed of two parts, an API token and a descriptive service name, separated by a colon `:`. Example: `qwertyuiop1234567:my_cool_service`.
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collector_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collector_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_collector_proto_rawDescGZIP(), []int{9}
}

func (x *PingRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

var File_collector_proto protoreflect.FileDescriptor

var file_collector_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xc3, 0x02, 0x0a,
	0x03, 0x41, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a,
	0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xff, 0x02, 0x0a, 0x05, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x56,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x56, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x56, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x56, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x56, 0x6d, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x56, 0x6d,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x03, 0x4b, 0x38, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x69, 0x64, 0x22, 0xe4, 0x04, 0x0a, 0x06,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x63, 0x32, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x65, 0x63, 0x32, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x72, 0x6f, 0x6b, 0x75, 0x44,
	0x79, 0x6e, 0x6f, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x72,
	0x6f, 0x6b, 0x75, 0x44, 0x79, 0x6e, 0x6f, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x7a, 0x41,
	0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x7a, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x2f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x61, 0x6d, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x61, 0x6d, 0x73, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x0b, 0x61, 0x77, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0d, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x52, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x30, 0x0a, 0x0b, 0x6b, 0x38, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4b, 0x38, 0x73, 0x52, 0x0b, 0x6b, 0x38, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xb2, 0x02, 0x0a, 0x0b, 0x4f, 0x62, 0x6f, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x6f,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4f, 0x62, 0x6f, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x6a, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22,
	0x7f, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x72, 0x67, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x6f, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x22, 0x26, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x2a, 0x5a, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x10, 0x04, 0x2a, 0x26, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x53, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x01, 0x2a, 0x2a,
	0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45,
	0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x57,
	0x53, 0x5f, 0x4c, 0x41, 0x4d, 0x42, 0x44, 0x41, 0x10, 0x01, 0x2a, 0x9f, 0x01, 0x0a, 0x0f, 0x4f,
	0x62, 0x6f, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x41, 0x4d, 0x50,
	0x4c, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x41, 0x4d, 0x50,
	0x4c, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x32, 0xe4, 0x02, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x43, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x42, 0x35, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x77, 0x69, 0x6e, 0x64, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x0d, 0x2e, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_collector_proto_rawDescOnce sync.Once
	file_collector_proto_rawDescData = file_collector_proto_rawDesc
)

func file_collector_proto_rawDescGZIP() []byte {
	file_collector_proto_rawDescOnce.Do(func() {
		file_collector_proto_rawDescData = protoimpl.X.CompressGZIP(file_collector_proto_rawDescData)
	})
	return file_collector_proto_rawDescData
}

var file_collector_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_collector_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_collector_proto_goTypes = []interface{}{
	(ResultCode)(0),         // 0: collector.ResultCode
	(EncodingType)(0),       // 1: collector.EncodingType
	(HostType)(0),           // 2: collector.HostType
	(OboeSettingType)(0),    // 3: collector.OboeSettingType
	(*Aws)(nil),             // 4: collector.Aws
	(*Azure)(nil),           // 5: collector.Azure
	(*K8S)(nil),             // 6: collector.K8s
	(*HostID)(nil),          // 7: collector.HostID
	(*OboeSetting)(nil),     // 8: collector.OboeSetting
	(*MessageRequest)(nil),  // 9: collector.MessageRequest
	(*MessageResult)(nil),   // 10: collector.MessageResult
	(*SettingsRequest)(nil), // 11: collector.SettingsRequest
	(*SettingsResult)(nil),  // 12: collector.SettingsResult
	(*PingRequest)(nil),     // 13: collector.PingRequest
	nil,                     // 14: collector.OboeSetting.ArgumentsEntry
}
var file_collector_proto_depIdxs = []int32{
	2,  // 0: collector.HostID.hostType:type_name -> collector.HostType
	4,  // 1: collector.HostID.awsMetadata:type_name -> collector.Aws
	5,  // 2: collector.HostID.azureMetadata:type_name -> collector.Azure
	6,  // 3: collector.HostID.k8sMetadata:type_name -> collector.K8s
	3,  // 4: collector.OboeSetting.type:type_name -> collector.OboeSettingType
	14, // 5: collector.OboeSetting.arguments:type_name -> collector.OboeSetting.ArgumentsEntry
	1,  // 6: collector.MessageRequest.encoding:type_name -> collector.EncodingType
	7,  // 7: collector.MessageRequest.identity:type_name -> collector.HostID
	0,  // 8: collector.MessageResult.result:type_name -> collector.ResultCode
	7,  // 9: collector.SettingsRequest.identity:type_name -> collector.HostID
	0,  // 10: collector.SettingsResult.result:type_name -> collector.ResultCode
	8,  // 11: collector.SettingsResult.settings:type_name -> collector.OboeSetting
	9,  // 12: collector.TraceCollector.postEvents:input_type -> collector.MessageRequest
	9,  // 13: collector.TraceCollector.postMetrics:input_type -> collector.MessageRequest
	9,  // 14: collector.TraceCollector.postStatus:input_type -> collector.MessageRequest
	11, // 15: collector.TraceCollector.getSettings:input_type -> collector.SettingsRequest
	13, // 16: collector.TraceCollector.ping:input_type -> collector.PingRequest
	10, // 17: collector.TraceCollector.postEvents:output_type -> collector.MessageResult
	10, // 18: collector.TraceCollector.postMetrics:output_type -> collector.MessageResult
	10, // 19: collector.TraceCollector.postStatus:output_type -> collector.MessageResult
	12, // 20: collector.TraceCollector.getSettings:output_type -> collector.SettingsResult
	10, // 21: collector.TraceCollector.ping:output_type -> collector.MessageResult
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_collector_proto_init() }
func file_collector_proto_init() {
	if File_collector_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_collector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aws); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Azure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OboeSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collector_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_collector_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_collector_proto_goTypes,
		DependencyIndexes: file_collector_proto_depIdxs,
		EnumInfos:         file_collector_proto_enumTypes,
		MessageInfos:      file_collector_proto_msgTypes,
	}.Build()
	File_collector_proto = out.File
	file_collector_proto_rawDesc = nil
	file_collector_proto_goTypes = nil
	file_collector_proto_depIdxs = nil
}
