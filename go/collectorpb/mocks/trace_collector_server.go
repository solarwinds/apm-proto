// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	collectorpb "github.com/solarwindscloud/apm-proto/go/collectorpb"

	mock "github.com/stretchr/testify/mock"
)

// TraceCollectorServer is an autogenerated mock type for the TraceCollectorServer type
type TraceCollectorServer struct {
	mock.Mock
}

// GetSettings provides a mock function with given fields: _a0, _a1
func (_m *TraceCollectorServer) GetSettings(_a0 context.Context, _a1 *collectorpb.SettingsRequest) (*collectorpb.SettingsResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSettings")
	}

	var r0 *collectorpb.SettingsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.SettingsRequest) (*collectorpb.SettingsResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.SettingsRequest) *collectorpb.SettingsResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectorpb.SettingsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *collectorpb.SettingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: _a0, _a1
func (_m *TraceCollectorServer) Ping(_a0 context.Context, _a1 *collectorpb.PingRequest) (*collectorpb.MessageResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *collectorpb.MessageResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.PingRequest) (*collectorpb.MessageResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.PingRequest) *collectorpb.MessageResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectorpb.MessageResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *collectorpb.PingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostEvents provides a mock function with given fields: _a0, _a1
func (_m *TraceCollectorServer) PostEvents(_a0 context.Context, _a1 *collectorpb.MessageRequest) (*collectorpb.MessageResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PostEvents")
	}

	var r0 *collectorpb.MessageResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest) (*collectorpb.MessageResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest) *collectorpb.MessageResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectorpb.MessageResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *collectorpb.MessageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostMetrics provides a mock function with given fields: _a0, _a1
func (_m *TraceCollectorServer) PostMetrics(_a0 context.Context, _a1 *collectorpb.MessageRequest) (*collectorpb.MessageResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PostMetrics")
	}

	var r0 *collectorpb.MessageResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest) (*collectorpb.MessageResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest) *collectorpb.MessageResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectorpb.MessageResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *collectorpb.MessageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStatus provides a mock function with given fields: _a0, _a1
func (_m *TraceCollectorServer) PostStatus(_a0 context.Context, _a1 *collectorpb.MessageRequest) (*collectorpb.MessageResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PostStatus")
	}

	var r0 *collectorpb.MessageResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest) (*collectorpb.MessageResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest) *collectorpb.MessageResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectorpb.MessageResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *collectorpb.MessageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTraceCollectorServer creates a new instance of TraceCollectorServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTraceCollectorServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TraceCollectorServer {
	mock := &TraceCollectorServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
