// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	collectorpb "github.com/solarwinds/apm-proto/go/collectorpb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// TraceCollectorClient is an autogenerated mock type for the TraceCollectorClient type
type TraceCollectorClient struct {
	mock.Mock
}

// GetSettings provides a mock function with given fields: ctx, in, opts
func (_m *TraceCollectorClient) GetSettings(ctx context.Context, in *collectorpb.SettingsRequest, opts ...grpc.CallOption) (*collectorpb.SettingsResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSettings")
	}

	var r0 *collectorpb.SettingsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.SettingsRequest, ...grpc.CallOption) (*collectorpb.SettingsResult, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.SettingsRequest, ...grpc.CallOption) *collectorpb.SettingsResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectorpb.SettingsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *collectorpb.SettingsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *TraceCollectorClient) Ping(ctx context.Context, in *collectorpb.PingRequest, opts ...grpc.CallOption) (*collectorpb.MessageResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *collectorpb.MessageResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.PingRequest, ...grpc.CallOption) (*collectorpb.MessageResult, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.PingRequest, ...grpc.CallOption) *collectorpb.MessageResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectorpb.MessageResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *collectorpb.PingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostEvents provides a mock function with given fields: ctx, in, opts
func (_m *TraceCollectorClient) PostEvents(ctx context.Context, in *collectorpb.MessageRequest, opts ...grpc.CallOption) (*collectorpb.MessageResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostEvents")
	}

	var r0 *collectorpb.MessageResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest, ...grpc.CallOption) (*collectorpb.MessageResult, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest, ...grpc.CallOption) *collectorpb.MessageResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectorpb.MessageResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *collectorpb.MessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostMetrics provides a mock function with given fields: ctx, in, opts
func (_m *TraceCollectorClient) PostMetrics(ctx context.Context, in *collectorpb.MessageRequest, opts ...grpc.CallOption) (*collectorpb.MessageResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostMetrics")
	}

	var r0 *collectorpb.MessageResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest, ...grpc.CallOption) (*collectorpb.MessageResult, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest, ...grpc.CallOption) *collectorpb.MessageResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectorpb.MessageResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *collectorpb.MessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStatus provides a mock function with given fields: ctx, in, opts
func (_m *TraceCollectorClient) PostStatus(ctx context.Context, in *collectorpb.MessageRequest, opts ...grpc.CallOption) (*collectorpb.MessageResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostStatus")
	}

	var r0 *collectorpb.MessageResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest, ...grpc.CallOption) (*collectorpb.MessageResult, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *collectorpb.MessageRequest, ...grpc.CallOption) *collectorpb.MessageResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectorpb.MessageResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *collectorpb.MessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTraceCollectorClient creates a new instance of TraceCollectorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTraceCollectorClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TraceCollectorClient {
	mock := &TraceCollectorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
